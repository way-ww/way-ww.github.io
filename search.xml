<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linuxdeploy无法启动MySQL</title>
      <link href="posts/b4cac3e6/"/>
      <url>posts/b4cac3e6/</url>
      
        <content type="html"><![CDATA[<p>关于安卓系统 Root 之后使用 linuxdeploy 的 chroot 环境中无法启动 MySQL</p><p>首先一部完全 Root 后的安卓手机在使用 linuxdeploy 安装 linux 环境时推荐使用 debian 系的发行版，不要用 centos 因为 centos 无法使用 service 和 systemctl 命令来管理服务。</p><p>在 linuxdeploy 上的 debian9 无法启动MySQL 尝试多种方法依然没法解决，然后重新安装 ubuntu18.04 后依然启动不了，查阅资料后发现安卓手机内核使用了 CONFIG_ANDROID_PARANDOID_NETWORK 编译过导致无法正常使用 linux 上的服务。</p><p>解决 MySQL 无法启动也很简单，运行以下命令即可</p><p>usermod -a -G aid_inet,aid_net_raw mysql</p><p>su mysql</p><p>service mysql restart</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s 实践</title>
      <link href="posts/0/"/>
      <url>posts/0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-摘要"><a href="#一、-摘要" class="headerlink" title="一、 摘要"></a>一、 摘要</h2><h4 id="1-1-前提：kubernetes环境已经搭建完成"><a href="#1-1-前提：kubernetes环境已经搭建完成" class="headerlink" title="1.1 前提：kubernetes环境已经搭建完成"></a>1.1 前提：kubernetes环境已经搭建完成</h4><blockquote><p>若没有搭建kubernetes环境，可查看我的上一篇<a href="https://wayaw.xyz/2020/03/14/k8s%E5%AE%89%E8%A3%85/">文章</a></p></blockquote><h4 id="1-2-使用到的技术"><a href="#1-2-使用到的技术" class="headerlink" title="1.2 使用到的技术"></a>1.2 使用到的技术</h4><ul><li><p>nfs 服务搭建</p></li><li><p>持久化存储</p></li><li><p>健康检查</p></li><li><p>端口暴露</p></li><li><p>deployment 部署</p></li><li><p>service 部署</p></li><li><p>pod 部署</p></li></ul><hr><h2 id="二、-搭建-nfs-服务-为持久化存储提供支持"><a href="#二、-搭建-nfs-服务-为持久化存储提供支持" class="headerlink" title="二、 搭建 nfs 服务(为持久化存储提供支持)"></a>二、 搭建 nfs 服务(为持久化存储提供支持)</h2><h4 id="2-1-在-nfs-服务器端安装-nfs-软件包-我这里选择了集群外的一台centos7作为nfs服务器"><a href="#2-1-在-nfs-服务器端安装-nfs-软件包-我这里选择了集群外的一台centos7作为nfs服务器" class="headerlink" title="2.1 在 nfs 服务器端安装 nfs 软件包(我这里选择了集群外的一台centos7作为nfs服务器)"></a>2.1 在 nfs 服务器端安装 nfs 软件包(我这里选择了集群外的一台centos7作为nfs服务器)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nfs-utils rpcbind</span><br></pre></td></tr></table></figure><h4 id="2-2-在-nfs-服务器上新建共享文件夹"><a href="#2-2-在-nfs-服务器上新建共享文件夹" class="headerlink" title="2.2 在 nfs 服务器上新建共享文件夹"></a>2.2 在 nfs 服务器上新建共享文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;nfsdata</span><br><span class="line">mkdir &#x2F;web</span><br></pre></td></tr></table></figure><h4 id="2-3-修改-nfs-服务配置文件"><a href="#2-3-修改-nfs-服务配置文件" class="headerlink" title="2.3 修改 nfs 服务配置文件"></a>2.3 修改 nfs 服务配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; &#x2F;etc&#x2F;exports &lt;&lt; EOF</span><br><span class="line">&#x2F;nfsdata     *(rw,no_root_squash)</span><br><span class="line">&#x2F;web     *(rw,no_root_squash)</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="2-4-重启-rpc-和-nfs-服务"><a href="#2-4-重启-rpc-和-nfs-服务" class="headerlink" title="2.4 重启 rpc 和 nfs 服务"></a>2.4 重启 rpc 和 nfs 服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nfs-server rpcbind</span><br><span class="line"></span><br><span class="line">systemctl restart rpcbind &amp;&amp; systemctl restart nfs-server</span><br></pre></td></tr></table></figure><h4 id="2-5-在集群每个-node-节点上挂载-nfs-共享文件夹"><a href="#2-5-在集群每个-node-节点上挂载-nfs-共享文件夹" class="headerlink" title="2.5 在集群每个 node 节点上挂载 nfs 共享文件夹"></a>2.5 在集群每个 node 节点上挂载 nfs 共享文件夹</h4><ul><li>安装必须软件包</li></ul><blockquote><p>yum -y install nfs-utils rpcbind</p></blockquote><ul><li>启动 rpcbind 和 nfs</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nfs &amp;&amp; systemctl enable rpcbind</span><br><span class="line"></span><br><span class="line">systemctl restart rpcbind &amp;&amp; systemctl restart nfs</span><br></pre></td></tr></table></figure><ul><li>命令行挂载测试</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;webroot</span><br><span class="line">mount.nfs  192.168.56.126:&#x2F;nfsdata  &#x2F;mnt</span><br><span class="line">mount.nfs  192.168.56.126:&#x2F;web  &#x2F;webroot</span><br></pre></td></tr></table></figure><ul><li>永久挂载<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; &#x2F;etc&#x2F;fstab &lt;&lt;EOF</span><br><span class="line">192.168.56.126:&#x2F;nfsdata  &#x2F;mnt  nfs  defaults  0 0</span><br><span class="line">192.168.56.126:&#x2F;web  &#x2F;webroot  nfs  defaults  0 0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="三、-创建-NFS-PersistentVolume"><a href="#三、-创建-NFS-PersistentVolume" class="headerlink" title="三、 创建 NFS PersistentVolume"></a>三、 创建 NFS PersistentVolume</h2><h4 id="3-1-创建两个-PV"><a href="#3-1-创建两个-PV" class="headerlink" title="3.1 创建两个 PV"></a>3.1 创建两个 PV</h4><ul><li>为 MySQL 预设一个 PV</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; pv-mysql.yml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: pv-mysql</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 1Gi</span><br><span class="line">  persistentVolumeReclaimPolicy: Retain</span><br><span class="line">  storageClassName: nfs</span><br><span class="line">  nfs:</span><br><span class="line">    path: &#x2F;nfsdata</span><br><span class="line">    server: 192.168.56.126</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>为 web 预设一个 PV</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; pv-web.yml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: pv-web</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 1Gi</span><br><span class="line">  persistentVolumeReclaimPolicy: Retain</span><br><span class="line">  storageClassName: nfs</span><br><span class="line">  nfs:</span><br><span class="line">    path: &#x2F;web</span><br><span class="line">    server: 192.168.56.126</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>应用 PV</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f pv-mysql.yml</span><br><span class="line"></span><br><span class="line">kubectl apply -f pv-web.yml</span><br></pre></td></tr></table></figure><ul><li>查看 PV</li></ul><blockquote><p>kubectl get pv</p></blockquote><h4 id="3-2-创建两个-PVC"><a href="#3-2-创建两个-PVC" class="headerlink" title="3.2 创建两个 PVC"></a>3.2 创建两个 PVC</h4><ul><li>pvc-mysql</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; pvc-mysql.yml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: pvc-mysql</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 1Gi</span><br><span class="line">  storageClassName: nfs</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>pvc-web</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; pvc-web.yml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: pvc-web</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 1Gi</span><br><span class="line">  storageClassName: nfs</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>应用两个pvc</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f pvc-mysql.yml</span><br><span class="line"></span><br><span class="line">kubectl apply -f pvc-web.yml</span><br></pre></td></tr></table></figure><ul><li>查看 pvc</li></ul><blockquote><p>kubectl get pvc</p></blockquote><hr><h2 id="四、-创建-MySQL"><a href="#四、-创建-MySQL" class="headerlink" title="四、 创建 MySQL"></a>四、 创建 MySQL</h2><h4 id="4-1-编写-mysql-yml"><a href="#4-1-编写-mysql-yml" class="headerlink" title="4.1 编写 mysql.yml"></a>4.1 编写 mysql.yml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; mysql.yml &lt;&lt;EOF</span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: mysql</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: mysql</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: mysql</span><br><span class="line">        name: mysql</span><br><span class="line">        env:</span><br><span class="line">        - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">          value: password</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 3306</span><br><span class="line">          name: mysql</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: mysql-persistent-storage</span><br><span class="line">          mountPath: &#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">      volumes:</span><br><span class="line">      - name: mysql-persistent-storage</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: pvc-mysql</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="4-2-为-MySQL-创建服务"><a href="#4-2-为-MySQL-创建服务" class="headerlink" title="4.2 为 MySQL 创建服务"></a>4.2 为 MySQL 创建服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; mysql-service.yml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 3306</span><br><span class="line">  selector:</span><br><span class="line">    app: mysql</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="4-3-部署完整的-MySQL"><a href="#4-3-部署完整的-MySQL" class="headerlink" title="4.3 部署完整的 MySQL"></a>4.3 部署完整的 MySQL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f mysql.yml</span><br><span class="line"></span><br><span class="line">kubectl apply -f mysql-service.yml</span><br></pre></td></tr></table></figure><h4 id="4-4-查看集群-pod-和-service"><a href="#4-4-查看集群-pod-和-service" class="headerlink" title="4.4 查看集群 pod 和 service"></a>4.4 查看集群 pod 和 service</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -o wide</span><br><span class="line"></span><br><span class="line">kubectl get service -o wide</span><br></pre></td></tr></table></figure><h4 id="4-5-登录-MySQL-并创建数据库-wordpress"><a href="#4-5-登录-MySQL-并创建数据库-wordpress" class="headerlink" title="4.5 登录 MySQL 并创建数据库 wordpress"></a>4.5 登录 MySQL 并创建数据库 wordpress</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl exec -it mysql bash</span><br><span class="line"></span><br><span class="line">create database wordpress;</span><br><span class="line"></span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">exit;</span><br></pre></td></tr></table></figure><hr><h2 id="五、-创建-nginx-和-php"><a href="#五、-创建-nginx-和-php" class="headerlink" title="五、 创建 nginx 和 php"></a>五、 创建 nginx 和 php</h2><blockquote><p>这里选择了容器镜像  richarvey/nginx-php-fpm<br>服务比较简单就用这一个镜像来完成 nginx 和 php 的部署</p></blockquote><h4 id="5-1-下载wordpress"><a href="#5-1-下载wordpress" class="headerlink" title="5.1 下载wordpress"></a>5.1 下载wordpress</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;cn.wp.xz.cn&#x2F;latest-zh_CN.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xzvf wordpress-5.3.2-zh_CN.tar.gz</span><br><span class="line"></span><br><span class="line">cp -rf wordpress&#x2F;* &#x2F;webroot</span><br></pre></td></tr></table></figure><h4 id="5-2-编写nginx-php-yml"><a href="#5-2-编写nginx-php-yml" class="headerlink" title="5.2 编写nginx-php.yml"></a>5.2 编写nginx-php.yml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; nginx-php.yml &lt;&lt;EOF</span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: lnmp-web</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: lnmp-web</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: lnmp-web</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: lnmp-web</span><br><span class="line">        image: richarvey&#x2F;nginx-php-fpm</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: &#x2F;var&#x2F;www&#x2F;html&#x2F;wordpress</span><br><span class="line">          name: web</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            scheme: HTTP</span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 15</span><br><span class="line">          periodSeconds: 5</span><br><span class="line">      volumes:</span><br><span class="line">        - name: web</span><br><span class="line">          persistentVolumeClaim:</span><br><span class="line">            claimName: pvc-web</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: web-service</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    app: lnmp-web</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 8080</span><br><span class="line">    targetPort: 80</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><blockquote><p>通过web-service 将应用端口暴露到外网，因为要使用 wordpress 必须能够从外部访问<br>通过 readiness 检测容器中的应用状态，启动成功后才将应用加入到负载均衡池中对外提供服务</p></blockquote><h4 id="5-3-部署-web-服务"><a href="#5-3-部署-web-服务" class="headerlink" title="5.3 部署 web 服务"></a>5.3 部署 web 服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nginx-php.yml</span><br><span class="line"></span><br><span class="line">kubectl get pod -o wide</span><br><span class="line"></span><br><span class="line">kubectl get service</span><br><span class="line">NAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">kubernetes    ClusterIP   10.96.0.1       &lt;none&gt;        443&#x2F;TCP          23h</span><br><span class="line">web-service   NodePort    10.106.95.165   &lt;none&gt;        8080:32304&#x2F;TCP   5m48s</span><br></pre></td></tr></table></figure><blockquote><p>第二步能够查看到 nginx-php 运行在哪一个 node 上</p></blockquote><blockquote><p>第三步可以查看到 nginx-php 端口映射到了 node 上的 32304 端口</p></blockquote><blockquote><p>有了运行的 node 的地址和映射的端口就能够从宿主机上的浏览器进行访问了</p></blockquote><hr><h2 id="六、-设置-wordpress"><a href="#六、-设置-wordpress" class="headerlink" title="六、 设置 wordpress"></a>六、 设置 wordpress</h2><h4 id="6-1-浏览器打开-web-服务映射的-ip-地址和端口号"><a href="#6-1-浏览器打开-web-服务映射的-ip-地址和端口号" class="headerlink" title="6.1 浏览器打开 web 服务映射的 ip 地址和端口号"></a>6.1 浏览器打开 web 服务映射的 ip 地址和端口号</h4><p><img src= "/img/loading.gif" data-lazy-src="http://q645hm16g.bkt.clouddn.com/wp1.PNG" alt="wp1"></p><h4 id="6-2-填写相关配置信息"><a href="#6-2-填写相关配置信息" class="headerlink" title="6.2 填写相关配置信息"></a>6.2 填写相关配置信息</h4><p><img src= "/img/loading.gif" data-lazy-src="http://q645hm16g.bkt.clouddn.com/wp2.PNG" alt="wp2"></p><p>这一步之后跟着提示就可以完成</p><h4 id="6-3-完成"><a href="#6-3-完成" class="headerlink" title="6.3 完成"></a>6.3 完成</h4><p><img src= "/img/loading.gif" data-lazy-src="http://q645hm16g.bkt.clouddn.com/wp3.PNG" alt="wp3"></p><hr>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装 vsftp</title>
      <link href="posts/bda00998/"/>
      <url>posts/bda00998/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装vsftp软件（vsftpd-not-ftp）"><a href="#一、安装vsftp软件（vsftpd-not-ftp）" class="headerlink" title="一、安装vsftp软件（vsftpd not ftp）"></a>一、安装vsftp软件（vsftpd not ftp）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vsftp</span><br></pre></td></tr></table></figure><h2 id="二、修改配置文件"><a href="#二、修改配置文件" class="headerlink" title="二、修改配置文件"></a>二、修改配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</span><br><span class="line"></span><br><span class="line">修改为以下内容</span><br><span class="line"></span><br><span class="line">anonymous_enable&#x3D;NO  ## 禁用匿名用户登录</span><br><span class="line"></span><br><span class="line">local_enable&#x3D;YES  ## 允许系统本地实体用户登录ftp</span><br><span class="line"></span><br><span class="line">write_enable&#x3D;YES  ## 允许写入，即上传权限</span><br><span class="line"></span><br><span class="line">chroot_local_user&#x3D;YES  ## 限制登录用户在自己主目录  </span><br><span class="line"></span><br><span class="line">allow_writeable_chroot&#x3D;YES  ## 配合上一步使用，允许限制在主目录的登录用户写入</span><br></pre></td></tr></table></figure><ul><li>关于chroot_local_user 与 chroot_list_enable的组合配置</li></ul><table><thead><tr><th>-</th><th align="center">chroot_local_user=YES</th><th>chroot_local_user=NO</th></tr></thead><tbody><tr><td>chroot_list_enable=YES</td><td align="center">除了chroot_list_file用户表所有的用户都被限制在其主目录</td><td>只有chroot_list_file用户表被限制在其主目录</td></tr><tr><td>chroot_list_enable=NO</td><td align="center">所有用户都被限制在其主目录</td><td>所有用户都不会被限制在其主目录中</td></tr></tbody></table><p>注意：<br>    - 若是启用chroot_list_file选项，则该文件必须存在</p><h2 id="三、创建用户"><a href="#三、创建用户" class="headerlink" title="三、创建用户"></a>三、创建用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -d &#x2F;var&#x2F;ftp&#x2F; -g ftp -s &#x2F;sbin&#x2F;nologin newftpuser</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、启动服务"><a href="#四、启动服务" class="headerlink" title="四、启动服务"></a>四、启动服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable vsftpd.service</span><br><span class="line"></span><br><span class="line">sysetmctl restart vsftpd.service</span><br></pre></td></tr></table></figure><h2 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h2><ul><li><p>浏览器或文件管理器输入 <a href="ftp://ip/">ftp://ip</a></p></li><li><p>服务器安装ftp命令进行测试</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ftp</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ftp localhost</span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost (::1).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (localhost:root): newftpuser</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意: /sbin/nologin用户可能无法登录ftp，需要在/etc/shells文件中加上/sbin/nologin否则系统认为其为无效用户，禁止其任何操作</p></li></ul><p>–done</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 配置阿里 yum 源</title>
      <link href="posts/a431c5ec/"/>
      <url>posts/a431c5ec/</url>
      
        <content type="html"><![CDATA[<p>快速命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.bak</span><br><span class="line"></span><br><span class="line">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br><span class="line"></span><br><span class="line">wget -P &#x2F;etc&#x2F;yum.repos.d&#x2F; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo</span><br><span class="line"></span><br><span class="line">yum clean all</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Failed to recive sock4 connect request ack</title>
      <link href="posts/12dacc4c/"/>
      <url>posts/12dacc4c/</url>
      
        <content type="html"><![CDATA[<p>因为我的 archlinux 开启了 socks5 代理，所以在执行 git clone 命令时出现题示错误</p><p>解决办法</p><p><code>git config --global http.proxy &#39;socks5://127.0.0.1:1080&#39;</code></p>]]></content>
      
      
      <categories>
          
          <category> Archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Archlinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 部署报错 permission denied</title>
      <link href="posts/92cbaf29/"/>
      <url>posts/92cbaf29/</url>
      
        <content type="html"><![CDATA[<p>具体错误：</p><p>Error: EACCES: permission denied, unlink</p><p>解决：</p><p>rm -rf ./deploy_git     </p><p>hexo clean       </p><p>hexo g       </p><p>hexo d</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 安装记录</title>
      <link href="posts/f6892ceb/"/>
      <url>posts/f6892ceb/</url>
      
        <content type="html"><![CDATA[<p>Centos 7 yum 安装 nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;7&#x2F;noarch&#x2F;RPMS&#x2F;nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><p>Centos 7 编译安装nginx1.11.1</p><ol><li><p>安装之前的准备</p><ul><li><p>安装pcre(支持rewrite模块)<br><code>yum install pcre*</code> </p></li><li><p>安装ssl(可选，不需要ssl支持可跳过)<br><code>yum install openssl*</code></p></li></ul></li><li><p>安装 nginx</p><ul><li><p>建立目录<br><code>mkdir -p /usr/local/nginx/src</code> 用来存放源码包<br><code>mkdir -p /usr/local/nginx/nginx-conf/conf</code>  用来存放配置文件       </p></li><li><p>下载nginx源码包到新建的目录<br><code>wget http://nginx.org/download/nginx-1.11.1.tar.gz -P /usr/local/nginx/src</code>    </p></li><li><p>解压源码包<br><code>cd /usr/local/nginx/src &amp;&amp; tar -xzvf nginx-1.11.1.tar.gz</code></p></li><li><p>配置<br><code>./configure --prefix=/usr/local/nginx/src/nginx-1.11.1 --conf-path=/usr/localnginx/nginx-conf/vhost/nginx.conf --with-http_ssl_module --with-http_realip_module --with-http_dav_module --with-http_gzip_static_module --with-http_v2_module --with-http_stub_status_module --with-pcre</code></p></li><li><p>安装<br><code>make &amp;&amp; make install</code><br>/usr/local/nginx/nginx-conf/conf 目录里存放以网站为单位的配置文件和子目录，文件名以网站域名命名，其他配置文件放在/usr/local/nginx/nginx-conf/这样可以配置分离，互不影响，而且好定位问题。</p></li><li><p>做链接<br><code>ln -s /usr/local/nginx/nginx-1.11.1/nginx /usr/bin</code></p></li><li><p>检查版本<br><code>nginx -v</code></p><p>完成</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RHCE 简单脚本</title>
      <link href="posts/1850408d/"/>
      <url>posts/1850408d/</url>
      
        <content type="html"><![CDATA[<h2 id="RHCE-编写脚本"><a href="#RHCE-编写脚本" class="headerlink" title="RHCE 编写脚本"></a>RHCE 编写脚本</h2><pre><code>    在 system1上创建一个名为/root/foo.sh 的脚本，让其提供下列特性:    当运行/root/foo.sh redhat，输出为 fedora；    当运行/root/foo.sh fedora，输出为 redhat；    当没有任何参数或者参数不是 redhat 或者 fedora 时，其错误输出产生以下的信息:/root/foo.sh redhat|fedora    在 system1上创建一个脚本，名为/root/batchusers，此脚本能为系统system1创建本地用户，且这些用户名来自一个文件，同时满足:    此脚本要求提供一个参数，此参数就是包含用户名列表的文件；    如果没有提供参数，此脚本应该给出下面的提示信息 Usage: /root/batchusers userfile 然后退出并返回相应的值；    如果提供一个不存在的文件名，此脚本应该给出下面的提示信息 Input file not found 然后退出并返回相应的值；    创建的用户登陆 Shell 为/bin/false，此脚本不需要为用户设置密码；    您可以从下面的 URL 获取用户名列表作为测试用:http://classroom.example.com/pub/materials/userlist</code></pre><hr><ul><li><p>编写脚本 foo.sh</p><pre><code>  &gt;# vim /root/foo.sh  #!/bin/bash  if [ &quot;$1&quot; = &quot;fedora&quot; ];then  echo redhat  elif [ &quot;$1&quot; = &quot;redhat&quot; ];then  echo fedora  else  echo &quot;/root/foo.sh redhat|fedora&quot;  fi  &gt;# chmod +x /root/foo.sh  &gt;# ./root/foo.sh redhat  fedora</code></pre></li><li><p>编写脚本 batchuser</p><pre><code>  &gt;# vim /root/batchusers  #!/bin/bash  if [ &quot;$#&quot; = 0 ];then  echo &quot;Usage:/root/batchusers userfile&quot;  exit 1  elif [ ! -f &quot;$1&quot; ];then  echo &quot;Inputfile not found&quot;  exit 2  else  for name in $(cat $1)  do  useradd -s /bin/false $name  done  fi  &gt;# chmod +x /root/batchusers</code></pre></li></ul><p><strong>finish</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedHat7 修改 root 密码</title>
      <link href="posts/e77896bc/"/>
      <url>posts/e77896bc/</url>
      
        <content type="html"><![CDATA[<ol><li>开机启动系统进入 grub 选择启动内核项时按键盘 e 进入编辑模式</li><li>按键盘的方向键向下移动光标到 linux16 所在行再按下键盘上的 end 按键定位到所在行的末尾处</li><li>在行末添加 <code>rd.break console=tty0</code></li><li>按下 <code>ctrl+x</code> 以此设定启动到shell</li><li>重新挂载 /sysroot 可读可写 <code>mount -o remount,rw /sysroot</code></li><li>换根 <code>chroot /sysroot</code> </li><li>复制一份原有的 shadow 文件<code>cp /etc/shadow /etc/shadow_bak</code></li><li>重新录入 root 密码 <code>passwd root</code></li><li>使 selinux 生效(按实际情况可选) <code>touch /.autorelabel</code></li><li>退出环境并重启 <code>exit</code> 之后 <code>reboot</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedHat 设置 selinux</title>
      <link href="posts/7fe450cb/"/>
      <url>posts/7fe450cb/</url>
      
        <content type="html"><![CDATA[<h2 id="RedHat-设置-selinux"><a href="#RedHat-设置-selinux" class="headerlink" title="RedHat 设置 selinux"></a>RedHat 设置 selinux</h2><p>设置 selinux 为 enforcing 模式</p><ol><li><p><code>vim /etc/selinux/config</code> 修改 <code>SELINUX=enforcing</code></p></li><li><p>命令 <code>getenforce</code> 可以查看当前 selinux 状态</p></li><li><p>命令 <code>setenforce 1</code> 也可以设置 enforcing 模式，不过请注意， setenforce 无法在 Disabled 的模式底下进行模式的切换</p></li></ol><hr><h3 id="selinux"><a href="#selinux" class="headerlink" title="selinux"></a>selinux</h3><blockquote><p>安全增强型 Linux（Security-Enhanced Linux）简称 SELinux，它是一个 Linux 内核模块，也是 Linux 的一个安全子系统。</p></blockquote><blockquote><p>SELinux 主要由美国国家安全局开发。 linux 内核 2.6 及以上版本的内核都已经集成了 SELinux 模块。</p></blockquote><blockquote><p>SELinux 主要作用就是最大限度地减小系统中服务进程可访问的资源（最小权限原则）。</p></blockquote><h5 id="DAC"><a href="#DAC" class="headerlink" title="DAC"></a>DAC</h5><blockquote><p>在没有使用 SELinux 的操作系统中，决定一个资源是否能被访问的因素是：某个资源是否拥有对应用户的权限（读、写、执行）。</p></blockquote><blockquote><p>只要访问这个资源的进程符合以上的条件就可以被访问。</p></blockquote><blockquote><p>而最致命问题是，root 用户不受任何管制，系统上任何资源都可以无限制地访问。</p></blockquote><blockquote><p>这种权限管理机制的主体是用户，也称为自主访问控制（Discretionary Access Control, DAC）。</p></blockquote><h5 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h5><blockquote><p>在使用了 SELinux 的操作系统中，决定一个资源是否能被访问的因素除了上述因素之外，还需要判断每一类进程是否拥有对某一类资源的访问权限。</p></blockquote><blockquote><p>这样一来，即使进程是以 root 身份运行的，也需要判断这个进程的类型以及允许访问的资源类型才能决定是否允许访问某个资源。进程的活动空间也可以被压缩到最小。</p></blockquote><blockquote><p>即使是以 root 身份运行的服务进程，一般也只能访问到它所需要的资源。举例来说， WWW 服务器软件的达成进程为 httpd 这支程序。而默认情况下，httpd 仅能在 /var/www/ 这个目录底下存取文件，如果 httpd 这个进程想要到其他目录去存取数据时， 除了规则设定要开放外，目标目录也得要设定 成 httpd 可读取的模式 (type) 才行，即使程序出了漏洞，影响范围也只有在其允许访问的资源范围内。安全性大大增加。这种权限管理机制的主体是进程，也称为强制访问控制（Mandatory Access Control, MAC）。而 MAC 又细分为了两种方式，一种叫类别安全（MCS）模式，另一种叫多级安全（MLS）模式。</p></blockquote><h5 id="MAC-和-DAC-区别图"><a href="#MAC-和-DAC-区别图" class="headerlink" title="MAC 和 DAC 区别图"></a>MAC 和 DAC 区别图</h5><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/way-ww/mypic/master/blog/mac%26dac%E5%8C%BA%E5%88%AB%E5%9B%BE.PNG"></p><p>在 DAC 模式下，只要相应目录有相应用户的权限，就可以被访问。而在 MAC 模式下，还要受进程允许访问目录范围的限制</p><h5 id="selinux-运作模式"><a href="#selinux-运作模式" class="headerlink" title="selinux 运作模式"></a>selinux 运作模式</h5><p>SELinux 是透过 MAC 的方式来控管进程，他控制的主体是进程，而目标则是该进程能否读取的『文件资源』！</p><ul><li><p><strong><strong>主体</strong></strong> (Subject)：</p><blockquote><p>SELinux 主要想要管理的就是进程，主体这里完全可以等同于进程；</p></blockquote></li><li><p><strong><strong>目标</strong></strong>(Object)：</p><blockquote><p>主体进程能否存取的『目标资源』一般就是文件系统。被主体访问的资源可以是文件、目录、端口、设备等；</p></blockquote></li><li><p><strong><strong>政策</strong></strong> (Policy)：</p><blockquote><p>由于进程与文件数量庞大，因此 SELinux 会依据某些服务来制订基本的存取安全性政策。这些政策内还会 有详细的规则 (rule) 来指定不同的服务开放某些资源的存取与否。系统中通常有大量的文件和进程，为了节省时间和开销，通常我们只是选择性地对某些进程进行管制。而哪些进程需要管制、要怎么管制是由政策决定的。一套政策里面有多个规则。部分规则可以按照需求启用或禁用（以下把该类型的规则称为布尔型规则）。规则是模块化、可扩展的。在安装新的应用程序时，应用程序可通过添加新的模块来添加规则。用户也可以手动地增减规则。在目前的 RedHat 7.x 里面仅有提供三个 主要的政策，分别是：</p></blockquote><ul><li><p>targeted：针对网络服务限制较多，针对本机限制较少，是预设的政策；</p></li><li><p>minimum：由 target 修订而来，仅针对选择的进程来保护！</p></li><li><p>mls：完整的 SELinux 限制，限制方面较为严格。</p><p>建议使用预设的 targeted 政策即可。</p></li></ul></li><li><p><strong><strong>安全上下文</strong></strong>（Security Context）</p><blockquote><p>安全上下文是 SELinux 的核心, 安全上下文可以看作为「进程安全上下文」和「文件安全上下文」俩部分。一个「进程安全上下文」一般对应多个「文件安全上下文」。只有两者的安全上下文对应上了，进程才能访问文件。它们的对应关系由政策中的规则决定。文件安全上下文由文件创建的位置和创建文件的进程所决定。而且系统有一套默认值，用户也可以对默认值进行设定。需要注意的是，单纯的移动文件操作并不会改变文件的安全上下文。</p></blockquote></li><li><p><strong><strong>安全上下文的结构与含义</strong></strong></p><blockquote><p>安全上下文有四个字段，分别用冒号隔开。形如：system_u:object_r:admin_home_t:s0<br><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/way-ww/mypic/master/blog/%E5%AE%89%E5%85%A8%E4%B8%8A%E4%B8%8B%E6%96%87.PNG"></p></blockquote></li><li><p>SELinux 的工作模式</p><blockquote><p>SELinux 有三种工作模式，分别是：</p></blockquote><blockquote><ol><li>enforcing：强制模式。违反 SELinux 规则的行为将被阻止并记录到日志中。</li></ol></blockquote><blockquote><ol start="2"><li>permissive：宽容模式。违反 SELinux 规则的行为只会记录到日志中。一般为调试用。</li></ol></blockquote><blockquote><ol start="3"><li>disabled：关闭 SELinux。</li></ol></blockquote><blockquote><p>SELinux 工作模式可以在 /etc/selinux/config 中设定。</p></blockquote><blockquote><p>如果想从 disabled 切换到 enforcing 或者 permissive 的话，需要重启系统。反过来也一样。</p></blockquote><blockquote><p>enforcing 和 permissive 模式可以通过 setenforce 1|0 命令快速切换。</p></blockquote><blockquote><p>需要注意的是，如果系统已经在关闭 SELinux 的状态下运行了一段时间，在打开 SELinux 之后的第一次重启速度可能会比较慢。因为系统必须为磁盘中的文件创建安全上下文</p></blockquote><blockquote><p>此外需要注意的是 SELinux 日志的记录需要借助 auditd.service 这个服务，所以最好不要禁用它。</p></blockquote></li><li><p>selinux 操作</p></li><li></li></ul><ol><li><p>查询文件或目录的安全上下文</p><pre><code> # ls -Z &lt;文件或目录&gt;</code></pre></li><li><p>查询进程的安全上下文</p><pre><code> # ps -eZ | grep -E &#39;进程名&#39;</code></pre></li><li><p>手动修改文件或目录的安全上下文</p><pre><code> # chcon &lt;选项&gt; &lt;文件或目录 1&gt; [&lt;文件或目录 2&gt;...]</code></pre><p> <strong>选项功能</strong></p><p> -u &lt;值&gt; 修改安全上下文的用户字段</p><p> -r &lt;值&gt;修改安全上下文的角色字段</p><p> -t &lt;值&gt;修改安全上下文的类型字段</p><p> -l &lt;值&gt;修改安全上下文的级别字段</p><p> –reference &lt;文件或目录&gt;修改与指定文件或目录相一致的安全上下文</p><p> -R递归操作</p><p> -h修改软链接的安全上下文（不加此选项则修改软链接对应文件）</p></li><li><p>把文件或目录的安全上下文恢复到默认值</p><pre><code> # restorecon [选项] &lt;文件或目录 1&gt; [&lt;文件或目录 2&gt;...] # restorecon -R /usr/share/nginx/html/        示例</code></pre></li><li><p>查询系统中的布尔型规则及其状态</p><pre><code> # getsebool -a</code></pre><p>由于该命令要么查询所有规则，要么只查询一个规则，所以一般都是先查询所有规则然后用 grep 筛选。</p></li><li><p>开关一个布尔型规则</p><pre><code> # setsebool [选项] &lt;规则名称&gt; &lt;on|off&gt;        （可接 -P 选项重启依然生效） # setsebool -P httpd_anon_write on            示例开启 httpd_anon_write  规则</code></pre></li><li><p>添加目录的默认安全上下文</p><pre><code> # semanage fcontext -a -t &lt;文件安全上下文中的类型字段&gt; &quot;&lt;目录（后面不加斜杠）&gt;(/.*)?&quot; 注：目录或文件的默认安全上下文可以通过 semanage fcontext -l 命令配合 grep 过滤查看</code></pre></li><li><p>SELinux 违规日志保存在 /var/log/audit/audit.log</p></li></ol><p>详见： 《鸟哥的Linux私房菜》 第四版 第十六章</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>alias 命令别名</title>
      <link href="posts/4fe171be/"/>
      <url>posts/4fe171be/</url>
      
        <content type="html"><![CDATA[<pre><code>alias 命令用来设置 Linux　shell 命令的别名。可以使用alias命令将较长的命令简写方便使用。</code></pre><ul><li><p>基本用法</p><pre><code>  # alias rm=&#39;echo do not use rm&#39;            临时生效，离开当前 shell 和重启后失效</code></pre></li><li><p>永久生效</p><pre><code>  将 alias 命令写入到 bashrc 或 profile 文件中，重启或者 source 永久生效</code></pre></li><li><p>priofile 和 bashrc 加载过程</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/way-ww/mypic/master/blog/profile%E5%8A%A0%E8%BD%BD.PNG"></p><ul><li><p>冲突内容最后加载的生效</p></li><li><p>非登录 shell 无法读取 /etc/profile</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux 搜狗输入法崩溃</title>
      <link href="posts/4ea9ff86/"/>
      <url>posts/4ea9ff86/</url>
      
        <content type="html"><![CDATA[<p>今天 archlinux 开机后就显示搜狗输入法崩溃，请删除.config/sogou*</p><p>然而照做之后重启任然没有解决，依然会提示搜狗输入法异常</p><p>在终端运行 sogou-qimpanel 后显示 libfcitx-qt.so 这个库缺失,这个库函数是属于fcitx-qt4 这个包中的，故只需要安装 fcitx-qt4 这个包就好了</p><p>yay -S fcitx-qt4</p><p>重启输入法问题解决</p>]]></content>
      
      
      <categories>
          
          <category> Archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Archlinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux 安装 windows 字体</title>
      <link href="posts/c25e56ca/"/>
      <url>posts/c25e56ca/</url>
      
        <content type="html"><![CDATA[<p>Linux上自带的字体许多情况下不够用，尤其是在打开Windows下的文件时经常会出现乱码的情况。</p><p>为了一劳永逸，我们就直接把 windows 的字体搬到 Linux中。</p><p>这很简单，首先你要复制 windows 系统 中 C:\Windows\Fonts 中的所有字体</p><p>然后在 Linux 中新建文件夹</p><p>sudo mkdir /usr/share/fonts/windows</p><p>接下来把刚才复制的字体全部粘贴到新建的文件夹中</p><p>最后生成字体缓存</p><p>fc-cache -f</p><p>完成</p>]]></content>
      
      
      <categories>
          
          <category> Archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Archlinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux 安装搜狗输入法</title>
      <link href="posts/79d76506/"/>
      <url>posts/79d76506/</url>
      
        <content type="html"><![CDATA[<p>安装可能需要 archlinuxcn 的源，我这里已经配置好了</p><p>一、安装 fcitx fcitx-configtool fcitx-im fcitx-sogoupinyin</p><p>pacman -S fcitx fcitx-configtool fcitx-im fcitx-sogoupinyin　</p><p>二、在 ~/.xprofile 文件中添加以下内容</p><p>export GTK_IM_MODULE=fcitx<br>export QT_IM_MODULE=fcitx<br>export XMODIFFIERS=”@im=fcitx”<br>fcitx -d -r –enable sogou-qimpanel</p><p>三、在 /etc/environment 文件中加入以下内容</p><p>GTK_IM_MODULE=fcitx<br>QT_IM_MODULE=fcitx<br>XMODIFIERS=@im=fcitx</p>]]></content>
      
      
      <categories>
          
          <category> Archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Archlinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装 Mysql</title>
      <link href="posts/7777a9fa/"/>
      <url>posts/7777a9fa/</url>
      
        <content type="html"><![CDATA[<p>1 下载MySQL的repo源</p><p>wget <a href="http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm">http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</a></p><p>2 安装下载的RPM包</p><p>sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</p><p>3 安装这个包后会使用俩个mysql的yum repo源</p><p>4 安装MySQL</p><p>sudo yum install mysql-server</p><p>5 完成。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 设置时区和时间同步</title>
      <link href="posts/390c8d32/"/>
      <url>posts/390c8d32/</url>
      
        <content type="html"><![CDATA[<ol><li>安装ntp软件包       </li></ol><p><code>yum install ntp</code></p><ol start="2"><li>设置服务自启动       </li></ol><p><code>systemctl enable ntpd</code></p><ol start="3"><li>启动ntp服务      </li></ol><p><code>systemctl start ntpd</code></p><ol start="4"><li>修改系统时区     </li></ol><p><code>ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p><ol start="5"><li>date查看当前时间</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令 -- cp</title>
      <link href="posts/3354cd2f/"/>
      <url>posts/3354cd2f/</url>
      
        <content type="html"><![CDATA[<p>cp 命令用来复制文件或者目录，是Linux 系统中最常用的命令之一。一般情况下，shell会设置一个别名，在命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，不管你是否使用了参数 -i 。但是如果在 shell 脚本中执行 cp 时，没有 -i 参数时不会询问是否覆盖。这说明命令行和 shell 脚本的执行方式是略有不同的。</p><p>命令格式    </p><pre><code>cp [选项] [-T] 源 目的</code></pre><p>命令功能</p><pre><code>将源文件复制至目标文件或者将多个源文件复制到目的目录中。</code></pre><p>命令行参数</p><pre><code>-a， 此选项通常在复制目录是使用，它保留链接、文件属性并复制目录下的所有内容。-d， 复制时保留链接。-f， 覆盖已经存在的目标文件且不给出提示。-i， 在覆盖目标文件之前给出提示，要求用户确认是否覆盖（y/n）-p， 复制内容包括所有属性：mode ownership timestamps–preserve[=ATTR_LIST] 默认参数和 -p 一样，可选参数还有：context links xattr all–no-preserver[=ATTR_LIST] 不保留指定的属性-r， 若给出的源文件是一个目录文件，此时将复制目录下所有的子目录和文件。-l， 不复制文件只是生成硬链接。-s， 不复制文件只生成软链接。-u， 仅在源文件比目标文件新或者目标文件不存在的情况下复制-t， 接目录名，将多个源文件复制到指定目录中</code></pre><p>示例</p><p>1.不加参数在有权限复制的情况下属主（ownership）和时间戳（timestamps）均改变</p><pre><code>ww@debian:~/test$ ll /etc/mysql/总用量 24drwxr-xr-x 2 root root 4096 9月  15 12:50 conf.d-rw------- 1 root root  277 9月  17 13:13 debian.cnf-rwxr-xr-x 1 root root 1620 8月   4 02:44 debian-start-rw-r--r-- 1 root root  869 8月   4 02:44 mariadb.cnfdrwxr-xr-x 2 root root 4096 9月  17 13:21 mariadb.conf.dlrwxrwxrwx 1 root root   24 9月  15 12:50 my.cnf -&gt; /etc/alternatives/my.cnf-rw-r--r-- 1 root root  839 8月   3  2016 my.cnf.fallbackww@debian:~/test$ cp /etc/mysql/debian-start /home/ww/test/ww@debian:~/test$ ll总用量 4-rwxr-xr-x 1 ww ww 1620 9月  22 22:19 debian-start</code></pre><p>2.选项-p 会保留源文件的属主和时间戳属性，但这里属主没有改变的原因是普通用户没法创建root文件</p><pre><code>ww@debian:~/test$ cp -p /etc/mysql/debian-start /home/ww/test/ww@debian:~/test$ ll总用量 4-rwxr-xr-x 1 ww ww 1620 8月   4 02:44 debian-start</code></pre><p>3.当root用户使用-p选项时完整的保留了源文件的所有属性</p><pre><code>root@debian:~# cp -p /home/ww/test/debian-start /root/root@debian:~# ll总用量 8-rwxr-xr-x 1 ww   ww   1620 8月   4 02:44 debian-startdrwxr-xr-x 2 root root 4096 9月  17 14:46 frp</code></pre><p>4.保留属主不变，时间戳变了</p><pre><code>root@debian:~# cp --preserve=ownership /home/ww/test/debian-start /root/root@debian:~# ll总用量 8-rwxr-xr-x 1 ww   ww   1620 9月  22 22:37 debian-startdrwxr-xr-x 2 root root 4096 9月  17 14:46 frp</code></pre><p>结束</p>]]></content>
      
      
      <categories>
          
          <category> Command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian 安装 php7.2</title>
      <link href="posts/c86d5bc/"/>
      <url>posts/c86d5bc/</url>
      
        <content type="html"><![CDATA[<p>添加 sury.org 的repo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y install apt-transport-https lsb-release ca-certificates</span><br><span class="line"></span><br><span class="line">wget -O &#x2F;etc&#x2F;apt&#x2F;trusted.gpg.d&#x2F;php.gpg https:&#x2F;&#x2F;packages.sury.org&#x2F;php&#x2F;apt.gpg</span><br><span class="line"></span><br><span class="line">sh -c &#39;echo &quot;deb https:&#x2F;&#x2F;packages.sury.org&#x2F;php&#x2F; $(lsb_release -sc) main&quot; &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;php.list&#39;</span><br><span class="line"></span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>end</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 简明记录</title>
      <link href="posts/a7c9ce0d/"/>
      <url>posts/a7c9ce0d/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h2><p>Docker 是一项虚拟化容器技术，提到虚拟化就不得不提虚拟机。docker 和虚拟机是不同的，虚拟机事实上是对硬件进行虚拟化然后再在其基础上运行一个完整的操作系统而docker是一种操作系统级的虚拟化技术,docker内的应用进程是直接运行在宿主的内核上的，容器没有自己的内核也没有虚拟化的硬件，这也使得docker具有轻便的特点。Docker是由Google公司利用 Go 语言开发实现的。核心技术是 Linux 内核的 cgroup 和 namespace 及 AUFS Union FS等。由于隔离的进程独立于宿主和其他的隔离的进程因此也被叫做容器。</p><hr><h2 id="Docker-基本概念"><a href="#Docker-基本概念" class="headerlink" title="Docker 基本概念"></a>Docker 基本概念</h2><ul><li>镜像(image)</li><li>容器(container)</li><li>仓库(repository)</li></ul><h3 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h3><p>可以理解成一个操作系统的 .iso 镜像，实际上镜像(image)是一个特殊的文件系统，其内包含容器运行时所需的程序、库函数、资源、配置文件等。Docker 镜像被设计为分层存储的结构即docker镜像并不是像 iso 镜像那样由一个文件组成而是由多个文件联合组成。分层存储使得镜像的复用和定制变得更加容易。</p><h3 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h3><p>如果说 docker 镜像可以用 .iso 镜像来比较,那么 docker 容器就可以看作 .iso 镜像文件为基础安装的操作系统，即 docker 容器是 docker 镜像运行时的实体。容器可以被创建，启动，暂停，停止和删除等。<br>容器的实质是一个进程，但和直接在宿主上运行的进程不同，docker 容器进程运行在属于自己的独立的命名空间。因此容器拥有自己的 root 文件系统，网络配置和进程空间等。和镜像一样docker 容器也是分层存储的，docker容器运行时以docker镜像为基础层，再在其基础上创建一个当前容器的存储层，需要注意的是容器存储层的生命周期和容器一样，当容器消亡的时候容器存储层也会随之消失，因此，任何存储在容器存储层的信息都会随容器删除而丢失。</p><h3 id="Docker-仓库"><a href="#Docker-仓库" class="headerlink" title="Docker 仓库"></a>Docker 仓库</h3><p>Docker 仓库是用来存放 docker 镜像的服务。Docker Registry 包含公开和私有的docker镜像存取服务。其中公开服务常用的是官网提供的Docker Hub 也是Docker 默认的Registry,可以类比GitHub 的功能。不过和GitHub 一样，国内访问速度极慢，因此国内通常用的最多的还是国内的镜像服务器比如阿里云。</p><hr><h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><p>获取更多 linux 发行版的详细安装指南请参考 <a href="https://docs.docker.com/install/">Docker 官方安装教程</a></p><p><strong>Centos7 安装 Docker</strong></p><p>系统要求：</p><ul><li>Docker 最低支持 Centos7</li><li>CPU 架构为 64 位</li><li>Linux 内核版本不低于 3.10 (因为overlay2存储驱动的原因，内核最好选择4.44及以上版本)</li></ul><h3 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h3><p>官方提供的自动安装脚本(因为网速原因实际上国内多用阿里云的脚本)：</p><p><code>&gt;# curl -ssL https://get.docker.com/ | sh</code></p><p>阿里云自动安装脚本：</p><p><code>&gt;# curl -sSL    http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet    |   sh </code></p><h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><p>/etc/sysctl.conf 末尾添加内核参数(ipv6有关)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1 </span><br><span class="line">net.bridge.bridge-nf-call-iptables  &#x3D; 1 </span><br></pre></td></tr></table></figure><p>重新加载 sysctl.conf</p><p><code>&gt;# sysctl -p       </code></p><p> 升级内核为4.44(建议)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;# rpm -Uvh http:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line">&gt;# yum --enablerepo&#x3D;elrepo-kernel install -y kernel-lt</span><br><span class="line">&gt;# grub2-set-default &quot;CentOS Linux (4.4.215-1.el7.elrepo.x86_64) 7 (Core)&quot;</span><br></pre></td></tr></table></figure><p>关闭selinux 和 firewalld (实验环境)</p><p> 安装必须组件</p><p><code>&gt;# yum -y install yum-utils  device-mapper-persistent-data lvm2</code></p><ul><li>添加 yum 源</li></ul><p><code>&gt;# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p><p><code>&gt;# yum-config-manager --enable docker-ce.repo</code></p><p>安装 docker</p><p><code>&gt;# yum update -y &amp;&amp; yum install docker-ce -y</code></p><p>建立 docker 用户组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;# groupadd docker</span><br><span class="line">&gt;# usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>启动 docker</p><p><code>&gt;# systemctl  enable docker &amp;&amp; systemctl start docker</code></p><hr><h2 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h2><p>docker 镜像相关命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;# docker pull nginx:latest    #拉取docker镜像到本地</span><br><span class="line">&gt;# docker images 或 docker image ls    #列出本地镜像</span><br><span class="line">&gt;# docker images -q   #只列出镜像的杂凑值</span><br><span class="line">&gt;# docker image rm nginx 或 docker rmi nginx   # 删除镜像</span><br><span class="line">&gt;# docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><p>docker 容器相关命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;# docker container run -itd -e a&#x3D;123 -p 8080:80 --network host --name nginx-test nginx    #创建容器后台运行</span><br><span class="line">&gt;# docker ps   #查看运行的容器</span><br><span class="line">&gt;# docker container stop nginx-test   #关闭容器</span><br><span class="line">&gt;# docker container start nginx-test   #启动容器</span><br><span class="line">&gt;# docker container stats nginx-test   #查看容器状态(cpu，内存，网络，磁盘读写等)</span><br><span class="line">&gt;# docker container attach nginx-test   #进入容器,此时 exit 退出的话容器也会终止,若要不停止容器退出可用快捷键 ctrl+p+q</span><br><span class="line">&gt;# docker container exec -it nginx-test sh   #进入容器，此时 exit 退出容器也不会终止 </span><br><span class="line">&gt;# docker container logs nginx-test   #查看后台容器日志 </span><br></pre></td></tr></table></figure><p>容器相关常用选项</p><table><thead><tr><th>选项</th><th align="center">长选项</th><th>意义</th></tr></thead><tbody><tr><td>-i</td><td align="center">–interactive</td><td>交互式</td></tr><tr><td>-t</td><td align="center">–tty</td><td>分配伪终端</td></tr><tr><td>-d</td><td align="center">–detach</td><td>后台运行容器</td></tr><tr><td>-a</td><td align="center">–attach</td><td>附加到运行的容器</td></tr><tr><td>-e</td><td align="center">–env</td><td>设置环境变量</td></tr><tr><td>-e</td><td align="center">–env-file</td><td>从文件读取环境变量</td></tr><tr><td>-p</td><td align="center">–publish</td><td>绑定容器和宿主端口”-p 8080:80”</td></tr><tr><td>-P</td><td align="center">–publish-all</td><td>绑定所有容器到宿主机随机端口</td></tr><tr><td>-h</td><td align="center">–hostname</td><td>设置容器主机名</td></tr><tr><td>-v</td><td align="center">–volume</td><td>挂载宿主机目录到容器</td></tr><tr><td></td><td align="center">–restart</td><td>设置重启策略(always,on-failure,no)</td></tr><tr><td>-m</td><td align="center">–memory</td><td>限制最大内存</td></tr><tr><td></td><td align="center">–cpus</td><td>指定cpu数目</td></tr></tbody></table><h2 id="Docker-数据管理"><a href="#Docker-数据管理" class="headerlink" title="Docker 数据管理"></a>Docker 数据管理</h2><p>Docker 容器内的数据会伴随容器的生命结束而消失，仅限于容器内部使用。为了能够数据共享和持久存储，docker默认提供了三种数据存储方式</p><ul><li>volumes: 可由 docker 管理创建的文件系统，属于宿主机的一部分，位于宿主机的 /var/lib/docker/volumes</li><li>bind mounts: 可以存储在指定的宿主机的任意位置,有点类似宿主机目录软链接到容器</li><li>tmpfs: 比较特别，其挂载在宿主机系统的 <strong>内存</strong> 中且不会写入到宿主机的文件系统中</li></ul><h3 id="volume-创建和管理"><a href="#volume-创建和管理" class="headerlink" title="volume 创建和管理"></a>volume 创建和管理</h3><p>常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;# docker volume create mysql-vol     创建名 mysql-vol 数据卷</span><br><span class="line">&gt;# docker volume ls     列出已有数据卷</span><br><span class="line">&gt;# docker volume rm mysql-vol     删除数据卷</span><br><span class="line">&gt;# docker volume inspect mysql-vol     列出数据卷详细信息</span><br><span class="line">&gt;# docker volume prune     删除所有未使用的数据卷</span><br></pre></td></tr></table></figure><p>容器挂载数据卷</p><p><code>&gt;# docker container run -itd --name nginx-test --mount src=mysql-vol,dst=/usr/share/nginx/html nginx</code></p><p>上面的命令选项中的数据卷若是没有被创建，执行时将自动创建匿名卷并挂载</p><h3 id="bind-使用"><a href="#bind-使用" class="headerlink" title="bind 使用"></a>bind 使用</h3><p>bind 可以看作是将宿主机中的目录绑定到容器的目录上，从而达到持久存储的目的。它与 volume 的区别是，不需要再创建和管理，直接利用宿主机上现成的资源即可。</p><p><code>&gt;# docker container run -itd --name nginx-test2 --mount type=bind,src=/var/www/html,dst=/usr/share/nginx/html nginx</code><br>和正常的挂载一样，若是挂载点在挂载后，作为挂载点目录中的原来的文件默认会被隐藏</p><h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><p>Docker 支持五种网络模式</p><ul><li>bridge 默认网络模式，容器启动后默认创建的网桥</li><li>host 容器不会获得一个独立的network namespace而是与宿主机共用</li><li>none 不为容器配置网卡，只有lo卡</li><li>container 与指定的容器使用同一个network namespace，网卡配置也是相同的</li><li>自定义</li></ul><p>使用docker网络</p><p><code>&gt;# dcoker container run -itd --name bs --net host busybox</code></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 实践 Lnmp 搭建 wordpress</title>
      <link href="posts/5c104f/"/>
      <url>posts/5c104f/</url>
      
        <content type="html"><![CDATA[<p>前提：</p><ul><li>在宿主机 centos7 上操作</li><li>宿主机已安装docker和mysql客户端</li><li>已配置宿主机ip：192.168.122.126</li></ul><h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><p><code>&gt;# docker network create lnmp</code></p><h2 id="创建mysql-vol数据卷"><a href="#创建mysql-vol数据卷" class="headerlink" title="创建mysql-vol数据卷"></a>创建mysql-vol数据卷</h2><p><code>&gt;# docker volume create mysql-vol</code></p><h2 id="创建mysql容器"><a href="#创建mysql容器" class="headerlink" title="创建mysql容器"></a>创建mysql容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker container run -itd \</span><br><span class="line">--name lnmp-mysql \</span><br><span class="line">--net lnmp \</span><br><span class="line">--mount src&#x3D;mysql-vol,dst&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql \</span><br><span class="line">-p 3306:3306</span><br><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;123 \</span><br><span class="line">mysql --character-set-server&#x3D;utf8</span><br></pre></td></tr></table></figure><h2 id="创建wordpress数据库"><a href="#创建wordpress数据库" class="headerlink" title="创建wordpress数据库"></a>创建wordpress数据库</h2><p><code>&gt;# mysql -h192.168.122.126 -uroot -p123</code></p><p><code>&gt; create database wp;</code></p><p><code>&gt; exit</code></p><h2 id="创建nginx和php容器"><a href="#创建nginx和php容器" class="headerlink" title="创建nginx和php容器"></a>创建nginx和php容器</h2><p>注：本步骤使用的richarvey/nginx-php-fpm容器包含了nginx和php</p><p><code>&gt;# mkdir /wwwhtml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker container run -itd \</span><br><span class="line">--name lnmp-web \</span><br><span class="line">--net lnmp \</span><br><span class="line">-p 8080:80 \</span><br><span class="line">--mount type&#x3D;bind,src&#x3D;&#x2F;wwwhtml,dst&#x3D;&#x2F;var&#x2F;www&#x2F;html richarvey&#x2F;nginx-php-fpm</span><br></pre></td></tr></table></figure><h2 id="下载wordpress压缩包"><a href="#下载wordpress压缩包" class="headerlink" title="下载wordpress压缩包"></a>下载wordpress压缩包</h2><p><code>&gt;# wget https://cn.wordpress.org/latest-zh_CN.tar.gz -O /wwwhtml</code></p><p>解压wordpress</p><p><code>&gt;# tar -xzvf wordpress-5.3.2-zh_CN.tar.gz</code></p><h2 id="访问web"><a href="#访问web" class="headerlink" title="访问web"></a>访问web</h2><p>浏览器打开<a href="http://192.168.122.126:8080/wordpress">http://192.168.122.126:8080/wordpress</a></p><p>查看到wordpress登录页面即代表完成搭建<br>剩余步骤按照网页提示即可完成wordpress的搭建</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令 -- find</title>
      <link href="posts/23982c6e/"/>
      <url>posts/23982c6e/</url>
      
        <content type="html"><![CDATA[<p>Linux下find命令在目录结构中搜索文件，并执行指定的操作。Linux下find命令提供了相当多的查找条件，功能很强大。由于find具有强大的功能，所以它的选项也很多，其中大部分选项都值得我们花时间来了解一下。即使系统中含有网络文件系统( NFS)，find命令在该文件系统中同样有效，只你具有相应的权限。 在运行一个非常消耗资源的find命令时，很多人都倾向于把它放在后台执行，因为遍历一个大的文件系统可能会花费很长的时间(这里是指30G字节以上的文件系统)</p><p>1.命令格式</p><p>find [path] [options]</p><p>2.命令功能</p><p>用于查找文件，常见于查找文件名，指定访问和修改时间内的文件等操作。</p><p>3.命令参数</p><p>pathname: 查找的目录路径，默认为当前目录。</p><p>-print： 将匹配到的文件输出到标准输出。</p><p>-exec： 对匹配到的文件执行该参数给出的shell命令： -exec ls -l {} \ ;</p><p>-ok: 作用同exec只是更安全的在执行每一条命令之前请求确认</p><p>4.命令选项：</p><p>-name 按照文件名查找文件，可使用shell匹配</p><p>-perm 按照文件权限查找文件 -perm 777</p><p>-type 查找指定的文件类型：</p><pre><code>b   块设备文件d   目录c   字符设备文件p   管道文件l   符号链接文件f   普通文件</code></pre><p>-size 查找指定文件大小 +1k 大于1k的文件 -1k 小于1k的文件</p><p>-amin n 最后n分钟访问的文件（距离当前时间n的第n分钟，下同）</p><p>-atime 最后n天访问的文件</p><p>-cmin 最后n分钟修改文件状态的文件（状态指文件是否修改，mode，ownership，链接数等）</p><p>-ctime 最后n天修改文件状态的文件</p><p>-mmin 最后n分钟修改文件数据的文件</p><p>-mtime n 最后n天那一天修改文件数据的文件</p><p>-mtime +n n 天前（不包含n天本身）被修改过的文件</p><p>-mtime -n n 天之内（包含n天本身）被修改过的文件</p><p>-user 按照文件属主查找</p><p>-nouser 查找无效属主文件</p><p>-nogroup 查找无效属组文件</p><p>-group 按照文件属组查找</p><p>-prune 指定不查找的目录</p><p>-maxdepth 在指定路径下查找文件的最深目录层次（紧接在路径后） 1 表示在指定目录下查找不递归</p><p>4.示例</p><p>查找指定大小的文件</p><pre><code>ww@debian:~/test$ ll -h总用量 8.0K-rwxr-xr-x 1 ww   ww   1.6K 9月  23 08:38 debian-start-rw-r--r-- 1 root root 1.0K 9月  23 10:08 kb-rw-r--r-- 1 root root    0 9月  23 10:06 ssww@debian:~/test$ find /home/ww/test/ -size +1k/home/ww/test//home/ww/test/debian-startww@debian:~/test$ find /home/ww/test/ -size -1k/home/ww/test/ssww@debian:~/test$ find /home/ww/test/ -size 1k/home/ww/test/kb</code></pre><p>匹配包含特定字符文件名的文件，并且递归目录查询</p><pre><code>root@debian:~# ll /etc/mysql/总用量 24drwxr-xr-x 2 root root 4096 9月  15 12:50 conf.d-rw------- 1 root root  277 9月  17 13:13 debian.cnf-rwxr-xr-x 1 root root 1620 8月   4 02:44 debian-start-rw-r--r-- 1 root root  869 8月   4 02:44 mariadb.cnfdrwxr-xr-x 2 root root 4096 9月  17 13:21 mariadb.conf.dlrwxrwxrwx 1 root root   24 9月  15 12:50 my.cnf -&gt; /etc/alternatives/my.cnf-rw-r--r-- 1 root root  839 8月   3  2016 my.cnf.fallbackroot@debian:~# find /etc/mysql/ -name &quot;*cnf*&quot; -type f -exec ls -l &#123;&#125; \;-rw-r--r-- 1 root root 55 8月   3  2016 /etc/mysql/conf.d/mysqldump.cnf-rw-r--r-- 1 root root 8 8月   3  2016 /etc/mysql/conf.d/mysql.cnf-rw-r--r-- 1 root root 336 8月   4 02:44 /etc/mysql/mariadb.conf.d/50-mysql-clients.cnf-rw-r--r-- 1 root root 3904 9月  17 13:21 /etc/mysql/mariadb.conf.d/50-server.cnf-rw-r--r-- 1 root root 733 8月   4 02:44 /etc/mysql/mariadb.conf.d/50-client.cnf-rw-r--r-- 1 root root 1032 8月   4 02:44 /etc/mysql/mariadb.conf.d/50-mysqld_safe.cnf-rw-r--r-- 1 root root 839 8月   3  2016 /etc/mysql/my.cnf.fallback-rw-r--r-- 1 root root 869 8月   4 02:44 /etc/mysql/mariadb.cnf-rw------- 1 root root 277 9月  17 13:13 /etc/mysql/debian.cn</code></pre><p>只在指定目录下查找不递归</p><pre><code>root@debian:~# find /etc/mysql/ -maxdepth 1 -name &quot;*cnf*&quot; -type f -exec ls -l &#123;&#125; \;-rw-r--r-- 1 root root 839 8月   3  2016 /etc/mysql/my.cnf.fallback-rw-r--r-- 1 root root 869 8月   4 02:44 /etc/mysql/mariadb.cnf-rw------- 1 root root 277 9月  17 13:13 /etc/mysql/debian.cnf</code></pre><p>查找俩天前创建的文件并询问是否删除</p><pre><code>root@debian:~# ll /var/log/mysql/总用量 16-rw-r----- 1 mysql adm 1892 9月  23 08:13 error.log-rw-r----- 1 mysql adm 1136 9月  22 23:07 error.log.1.gz-rw-r----- 1 mysql adm 1572 9月  20 14:57 error.log.2.gz-rw-rw---- 1 mysql adm 1598 9月  19 17:09 error.log.3.gzroot@debian:~# date2019年 09月 23日 星期一 10:58:43 CSTroot@debian:~# find /var/log/mysql/ -mtime +3 -ok rm &#123;&#125; \;root@debian:~# find /var/log/mysql/ -mtime +2 -ok rm &#123;&#125; \;&lt; rm ... /var/log/mysql/error.log.3.gz &gt; ? y</code></pre>]]></content>
      
      
      <categories>
          
          <category> Command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Firewall 富规则</title>
      <link href="posts/4f3be07e/"/>
      <url>posts/4f3be07e/</url>
      
        <content type="html"><![CDATA[<p>1 添加富规则</p><p><code>firewall-cmd --permanent --add-rich-rule=&#39;rule family=ipv4 source address=192.168.122.219 service name=ssh reject&#39;</code> 永久拒绝指定ip地址的ssh访问</p><p>2 移除富规则</p><p><code>firewall-cmd --permanent --remove-rich-rule=&#39;rule family=ipv4 source address=192.168.122.219 service name=ssh reject</code>永久移除该条富规则  </p><p>3 默认配置文件</p><p>/etc/firewalld/zones/public.xml<br>可直接修改配置文件来达到同样的目的</p><p>4 默认zone为public 如果无法删除一条信息错误的规则可以直接删除配置文件中相应的内容，–permanent 添加永久的规则(加与不加的区别是重启后是否任然有效)</p><p>5 相关命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-rich-rules  列出所有富规则(默认为public)</span><br><span class="line">firewall-cmd --list-rich-rules --zone&#x3D;home  列出home区域的所有富规则</span><br><span class="line">firewall-cmd --get-services  列出可用于防火墙规则的预定义服务</span><br><span class="line">firewall-cmd --list-services   列出区域中允许的服务(默认为public)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frp 免费内网穿透</title>
      <link href="posts/972cb8f7/"/>
      <url>posts/972cb8f7/</url>
      
        <content type="html"><![CDATA[<p>frp免费内网穿透 <a href="https://www.natfrp.com/">https://www.natfrp.com</a> 免费提供五条免费映射隧道用于内网穿透，且注册和使用都很简单方便，详细信息可自行访问。</p><p>注册登录后点击左侧的仪表盘可以查看自己的使用信息和可选的服务器信息</p><p>然后点击左侧的映射列表，可以进行隧道管理，添加所需要的映射隧道，相关信息页面的提示也很清楚</p><p>添加完成后，服务端的免费映射隧道就已经创建完毕，下面开始客户端的设置</p><p>同样是点击左侧的客户端软件，下载对应的版本客户端到本地的需要进行内网穿透的服务器中，解压运行，按照提示登录账号，选择服务器即可完成设置。只有俩三步，很快就设置好了</p><p>还有域名绑定（自己申请的）直接解析cname到映射的服务器地址上，即可完成域名访问。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables 基础</title>
      <link href="posts/69a628fb/"/>
      <url>posts/69a628fb/</url>
      
        <content type="html"><![CDATA[<p>iptables 本身并不是防火墙只是一个管理、设定规则的管理工具，位于 Linux 内核空间的 netfilter 才是软件防火墙， netfiter 概括性可划分为: INPUT, OUTPUT, PREROUTING, POSTROUTING, FORWARD 五条链，或者按照类似的规则功能可划分为: nat, filter, raw, mangle.本部分记录了 iptables 的基础内容，更多信息可见 <a href="https://wayaw.xyz/2020/06/19/iptables%E6%89%A9%E5%B1%95/">iptables 进阶</a></p><hr><h3 id="安装-iptables"><a href="#安装-iptables" class="headerlink" title="安装 iptables"></a>安装 iptables</h3><p>默认 Centos7 和 RedHat7 以上版本的防火墙管理工具已更换为 firewalld</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line">yum -y install iptables</span><br><span class="line"></span><br><span class="line">systemctl enable iptables</span><br><span class="line"></span><br><span class="line">systemctl start iptables</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看-iptables-规则"><a href="#查看-iptables-规则" class="headerlink" title="查看 iptables 规则"></a>查看 iptables 规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -xnvL --line INPUT</span><br><span class="line"></span><br><span class="line">-t 选项指定m表名，不加 -t 选项则默认为 filter 表</span><br><span class="line"></span><br><span class="line">-n 选项不对 iptables 列出的 ip 进行名称反解，显示原始 ip 地址</span><br><span class="line"></span><br><span class="line">-x 选项用于精确反应对应规则匹配的报文的数量和总和大小</span><br><span class="line"></span><br><span class="line">-v 选项用于显示详细信息，包括匹配的报文数量、报文总和大小、指定的网卡流入流出规则等</span><br><span class="line"></span><br><span class="line">-L 选项列出规则,后面加上具体的链名，不加链名则显示对应表中的所有链规则</span><br><span class="line"></span><br><span class="line">--line 选项用于在列出规则时显示行号</span><br></pre></td></tr></table></figure><h2 id="增加-iptables-规则"><a href="#增加-iptables-规则" class="headerlink" title="增加 iptables 规则"></a>增加 iptables 规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I INPUT -s 192.168.56.126 -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -t filter -A INPUT -s 192.168.56.126 -j DROP</span><br><span class="line"></span><br><span class="line">iptables -t filter -I INPUT 2 -s 192.168.56.126 -j LOG   ##在 INPUT 链的第二行添加相应规则</span><br><span class="line"></span><br><span class="line">-I 和 -A 选项均是用于增加规则，区别在于， -I在要添加规则的链最前端插入规则，-A则是最后追加规则</span><br><span class="line"></span><br><span class="line">规则的顺序是非常重要的，匹配规则时从上向下进行匹配，上面的三个示例中，事实上只有第一条生效，下面两条都没有几乎进行处理</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除-iptables-规则"><a href="#删除-iptables-规则" class="headerlink" title="删除 iptables 规则"></a>删除 iptables 规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -D INPUT 2  ##不建议使用</span><br><span class="line"></span><br><span class="line">iptables -t filter -D INPUT -s 192.168.56.126 -j LOG  ##建议的删除操作</span><br><span class="line"></span><br><span class="line">iptables -t filter -F INPUT  ##清空 filter 表中的 INPUT 链所有规则</span><br><span class="line"></span><br><span class="line">iptables -t filter -F  ##清空 filter 表中的所有链规则</span><br></pre></td></tr></table></figure><h3 id="修改-iptables-规则"><a href="#修改-iptables-规则" class="headerlink" title="修改 iptables 规则"></a>修改 iptables 规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I INPUT -s 192.168.56.126 -j DROP</span><br><span class="line"></span><br><span class="line">iptables -t filter -R INPUT 1 -s 192.168.56.126 -j ACCETP  ##加上序号1，修改上一条添加的DROP动作为ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -t filter -P INPUT DROP  ##将 filter 表中的 INPUT 链默认策略修改为 DROP(仅作演示)</span><br></pre></td></tr></table></figure><h3 id="保存-iptables-规则"><a href="#保存-iptables-规则" class="headerlink" title="保存 iptables 规则"></a>保存 iptables 规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">上面的所有操作都是在线生效，但是没有保存到配置文件中，亦即重启失效，因此需要在线生效的同时也保存到配置文件中去</span><br><span class="line"></span><br><span class="line">service iptables save  ##用 service 命令将当前生效的所有 iptables 规则保存到 &#x2F;etc&#x2F;sysconfig&#x2F;iptables 中去</span><br><span class="line"></span><br><span class="line">iptables-save  ##此命令可在终端显示所有生效规则，故也可以使用此命令配合重定向保存规则到配置文件</span><br><span class="line"></span><br><span class="line">或者手动增删改查规则时同时也修改配置文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables 进阶</title>
      <link href="posts/c7d7e953/"/>
      <url>posts/c7d7e953/</url>
      
        <content type="html"><![CDATA[<p>本篇内容用于记录与 iptables 相关的进阶操作，包括针对端口、扩展模块的使用。</p><p>关于 iptables 的基础操作可见 <a href="http://wayaw.xyz/">iptables 基础</a></p><hr><h3 id="iptables-的匹配条件"><a href="#iptables-的匹配条件" class="headerlink" title="iptables 的匹配条件"></a>iptables 的匹配条件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -A INPUT -s 192.168.56.126,192.168.56.125 -j REJECT</span><br><span class="line">匹配多个 ip 时可以使用逗号隔开，需要注意的是逗号两边不能加任何空格或符号</span><br><span class="line"></span><br><span class="line">iptables -t filter -I INPUT ! -s 192.168.56.126 -j ACCEPT</span><br><span class="line">和大多数编程语言一样 ！ 用来取反，上面的命令意思是除了源地址为 192.168.56.126 的报文都接收</span><br><span class="line"></span><br><span class="line">iptables -t filter -I INPUT -s 192.168.56.0&#x2F;24 -j DROP</span><br><span class="line">针对匹配网段进行处理</span><br><span class="line"></span><br><span class="line">iptables -t filter -I INPUT -i eth1 -p icmp -j REJECT</span><br><span class="line">拒绝由 eth1 网卡流入的 icmp 报文</span><br><span class="line">-i 指定流入网卡， -o 指定流出网卡</span><br><span class="line"></span><br><span class="line">iptables -t filter -A INPUT -s 192.168.56.126 -d 192.168.56.176 -p tcp --sport 22 --dport 22 -j REJECT</span><br><span class="line">上面的一条命令指定了源地址和目的地址以及源端口目的端口、协议类型，是一条相对完整的命令</span><br><span class="line">其中 --sport 与 --dport 使用时需要首先使用 -p 选项指定协议类型</span><br><span class="line">-p 选项支持的协议类型为 tcp, udp, udplite, icmp, icmpv6,esp, ah, sctp, mh (Centos7 及 Redhat7 以上版本)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="iprange-模块"><a href="#iprange-模块" class="headerlink" title="iprange 模块"></a>iprange 模块</h3><p>使用iprange扩展模块可以指定”一段连续的IP地址范围”，用于匹配报文的源地址或者目标地址。<br>iprange扩展模块中有两个扩展匹配条件可以使用<br>–src-range<br>–dst-range</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I INPUT -m iprange --src-range 192.168.56.1-192.168.56.128 -j REJECT</span><br><span class="line">-m 用于指定使用的 iptables 扩展模块， --dst-range 使用方法同理</span><br></pre></td></tr></table></figure><h3 id="state-模块"><a href="#state-模块" class="headerlink" title="state 模块"></a>state 模块</h3><p>对于state模块来说，报文状态可以为NEW、ESTABLISHED、RELATED、INVALID、UNTRACKED</p><table><thead><tr><th align="center">state</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">NEW</td><td align="center">新连接的第一个包的状态为NEW</td></tr><tr><td align="center">ESTABLISHED</td><td align="center">NEW状态包后面的包的状态理解为ESTABLISHED，表示连接已建立</td></tr><tr><td align="center">RELATED</td><td align="center">数据连接”中的报文与”命令连接”是有”关系”的如ftp</td></tr><tr><td align="center">INVALIED</td><td align="center">无法识别的报文</td></tr><tr><td align="center">UNTRACKED</td><td align="center">报文未被追踪，无法找到相关的连接</td></tr></tbody></table><p>列举出的五种状态中，ESTABLISHED 由很实际的应用，例如 iptables 开放的端口，为了避免非法用户主动连接开放的端口，可以使用 state 扩展模块来匹配 ESTABLISHED 状态的报文，因为如果报文有 ESTABLISHED 状态，代表其是由本机首先发出连接请求然后目标主机回应才能建立连接，可以有效避免有心之人的主动连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I INPUT -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">这条命令就代表着只有回应主机的报文和本机主动发出的报文可以通过防火墙</span><br></pre></td></tr></table></figure><h3 id="iptables-自定义链"><a href="#iptables-自定义链" class="headerlink" title="iptables 自定义链"></a>iptables 自定义链</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -N WEB_INPUT</span><br><span class="line">上面的命令是新建一条 WEB_INPUT 链</span><br><span class="line"></span><br><span class="line">iptables -t filter -I WEB_INPUT -s 192.168.56.126 -j REJECT</span><br><span class="line">为新建的链添加规则，和默认链的管理没有区别,但是此时的新链还没法匹配任何报文，若要正常使用还需要其他默认的链来引用，此处需要 INPUT 链</span><br><span class="line"></span><br><span class="line">iptables -t filter -I INPUT -p tcp --dport 80 -j WEB_INPUT</span><br><span class="line">-j 选项原本是用于指定处理动作也可以用来引用新建链，将匹配的报文交由新链处理</span><br><span class="line"></span><br><span class="line">** 重命名自定义链 **</span><br><span class="line">iptable -E WEB_INPUT WEB</span><br><span class="line">重命名后的自定义链之前添加的规则也会自动归并到改名后的链</span><br><span class="line"></span><br><span class="line">** 删除自定义链 **</span><br><span class="line">iptables -X WEB</span><br><span class="line">删除自定义链需要满足两个条件，一是自定义链没有被引用(references 0) ,二是自定义链中没有任何规则</span><br></pre></td></tr></table></figure><h3 id="iptables-的-LOG-动作"><a href="#iptables-的-LOG-动作" class="headerlink" title="iptables 的 LOG 动作"></a>iptables 的 LOG 动作</h3><p>LOG 可以将符合条件的报文的相关信息记录到日志中，但当前报文具体是被”接受”，还是被”拒绝”，都由后面的规则控制,即只记录匹配的报文不作其他处理<br>LOG 动作默认将记录的相关信息记录到 /var/log/messages 中，为了避免日志内容混杂可以修改 /etc/rsyslog.conf 文件，具体内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;rsyslog.conf</span><br><span class="line"></span><br><span class="line">添加下面一条信息</span><br><span class="line">kern.warning &#x2F;var&#x2F;log&#x2F;iptables.log</span><br><span class="line"></span><br><span class="line">systemctl restart rsyslog</span><br></pre></td></tr></table></figure><p>以上即可将 LOG 动作记录的相关信息保存到 /etc/log/iptables.log 文件中</p><p>LOG动作也有自己的选项，常用选项如下（先列出概念，后面有示例）<br>–log-level选项可以指定记录日志的日志级别，可用级别有emerg，alert，crit，error，warning，notice，info，debug。<br>–log-prefix选项可以给记录到的相关信息添加”标签”之类的信息，以便区分各种记录到的报文信息，方便在分析时进行过滤。</p><p>例如将主动连接 22 端口的报文信息记录下来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I INPUT -p tcp --dport 22 -m state --state NEW  -j LOG --log-prefix &quot;who-want-login&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedHat7 配置 ipv6</title>
      <link href="posts/81544468/"/>
      <url>posts/81544468/</url>
      
        <content type="html"><![CDATA[<h2 id="RedHat7-配置-ipv6-地址"><a href="#RedHat7-配置-ipv6-地址" class="headerlink" title="RedHat7 配置 ipv6 地址"></a>RedHat7 配置 ipv6 地址</h2><pre><code>在您的考试系统上配置接口 eth0 使用下列 IPv6 地址:system1上的地址应该是 2003:ac18::305/64：system2上的地址应该是 2003:ac18::306/64；两个系统必须能与网络 2003:ac18/64 内的系统通信 ；地址必须在重启后依旧生效；两个系统必须保持当前的 IPv4 地址并能通信。</code></pre><hr><ul><li><p>配置过程（以一台为例，另同）</p><pre><code>  &gt; # nmcli connection modify &quot;System eth0&quot; ipv6.method manual ipv6.address &quot;2003:ac18::305/64&quot;  &gt; # nmcli connection up eth0</code></pre></li><li><p>测试能否 ping 通</p><pre><code>  &gt; # ping6 2003:ac18::305</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s 安装记录</title>
      <link href="posts/e905cf11/"/>
      <url>posts/e905cf11/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-环境说明"><a href="#一、-环境说明" class="headerlink" title="一、 环境说明"></a>一、 环境说明</h2><ul><li><p>虚拟机 CentOS7.6 三台</p></li><li><p>RAM 2G</p></li><li><p>CPU 2</p></li></ul><hr><h2 id="二、-安装前准备（此步骤三台机器都需要执行）"><a href="#二、-安装前准备（此步骤三台机器都需要执行）" class="headerlink" title="二、 安装前准备（此步骤三台机器都需要执行）"></a>二、 安装前准备（此步骤三台机器都需要执行）</h2><h4 id="2-1-升级内核至-4-44-或以上"><a href="#2-1-升级内核至-4-44-或以上" class="headerlink" title="2.1  升级内核至 4.44 或以上"></a>2.1  升级内核至 4.44 或以上</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line">yum --enablerepo&#x3D;elrepo-kernel install -y kernel-lt</span><br><span class="line">grub2-set-default &quot;CentOS Linux (4.4.215-1.el7.elrepo.x86_64) 7 (Core)&quot;</span><br></pre></td></tr></table></figure><h4 id="2-2-关闭-firewalld-和-selinux"><a href="#2-2-关闭-firewalld-和-selinux" class="headerlink" title="2.2 关闭 firewalld 和 selinux"></a>2.2 关闭 firewalld 和 selinux</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line">sed -i &#39;s&#x2F;^SELINUX&#x3D;enforcing$&#x2F;SELINUX&#x3D;permissive&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config</span><br></pre></td></tr></table></figure><h4 id="2-3-开启数据包转发"><a href="#2-3-开启数据包转发" class="headerlink" title="2.3 开启数据包转发"></a>2.3 开启数据包转发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1</span><br><span class="line">net.ipv4.ip_forward &#x3D; 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h4 id="2-4-关闭交换分区"><a href="#2-4-关闭交换分区" class="headerlink" title="2.4 关闭交换分区"></a>2.4 关闭交换分区</h4><blockquote><p>直接修改文件 /etc/fstab 注释掉 swap 分区</p></blockquote><h4 id="2-5-配置主机名-分别命名三台机器主机名为-master-node1-和-node2"><a href="#2-5-配置主机名-分别命名三台机器主机名为-master-node1-和-node2" class="headerlink" title="2.5 配置主机名 (分别命名三台机器主机名为 master node1 和 node2)"></a>2.5 配置主机名 (分别命名三台机器主机名为 master node1 和 node2)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname master</span><br><span class="line">hostnamectl set-hostname node1</span><br><span class="line">hostnamectl set-hostname node2</span><br></pre></td></tr></table></figure><h4 id="2-6-修改-hosts-文件"><a href="#2-6-修改-hosts-文件" class="headerlink" title="2.6 修改 hosts 文件"></a>2.6 修改 hosts 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; &#x2F;etc&#x2F;hosts &lt;&lt; EOF</span><br><span class="line">192.168.56.116    master</span><br><span class="line">192.168.56.117    node1</span><br><span class="line">192.168.56.118    node2</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="2-7-重启"><a href="#2-7-重启" class="headerlink" title="2.7 重启"></a>2.7 重启</h4><hr><h2 id="三、-安装-Docker-此步骤三台机器都要执行"><a href="#三、-安装-Docker-此步骤三台机器都要执行" class="headerlink" title="三、 安装 Docker (此步骤三台机器都要执行)"></a>三、 安装 Docker (此步骤三台机器都要执行)</h2><h4 id="3-1-安装依赖软件"><a href="#3-1-安装依赖软件" class="headerlink" title="3.1 安装依赖软件"></a>3.1 安装依赖软件</h4><blockquote><p><code>yum -y install yum-utils device-mapper-persistent-data lvm2</code></p></blockquote><h4 id="3-2-添加-docker-的阿里镜像源"><a href="#3-2-添加-docker-的阿里镜像源" class="headerlink" title="3.2 添加 docker 的阿里镜像源"></a>3.2 添加 docker 的阿里镜像源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum-config-manager --enable docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum clean all &amp;&amp; yum -y makecache</span><br></pre></td></tr></table></figure><h4 id="3-3-安装-docker"><a href="#3-3-安装-docker" class="headerlink" title="3.3 安装 docker"></a>3.3 安装 docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce.x86_64  --showduplicates |sort -r</span><br><span class="line"></span><br><span class="line">yum install docker-ce-18.09.3.ce-3.el7 -y</span><br><span class="line"></span><br><span class="line">systemctl start docker &amp;&amp; systemctl enable docker</span><br></pre></td></tr></table></figure><h4 id="3-4-配置-docker-镜像加速器"><a href="#3-4-配置-docker-镜像加速器" class="headerlink" title="3.4 配置 docker 镜像加速器"></a>3.4 配置 docker 镜像加速器</h4><blockquote><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">注册阿里加速链接</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;635f8iwu.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="3-5-修改-Cgroup-Driver"><a href="#3-5-修改-Cgroup-Driver" class="headerlink" title="3.5 修改 Cgroup Driver"></a>3.5 修改 Cgroup Driver</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;635f8iwu.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="3-6-重新加载-docker"><a href="#3-6-重新加载-docker" class="headerlink" title="3.6 重新加载 docker"></a>3.6 重新加载 docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><hr><h2 id="四、-安装-kubernetes-此步骤三台机器都需要执行"><a href="#四、-安装-kubernetes-此步骤三台机器都需要执行" class="headerlink" title="四、 安装 kubernetes (此步骤三台机器都需要执行)"></a>四、 安装 kubernetes (此步骤三台机器都需要执行)</h2><h4 id="4-1-时间同步"><a href="#4-1-时间同步" class="headerlink" title="4.1 时间同步"></a>4.1 时间同步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate -u cn.ntp.org.cn</span><br></pre></td></tr></table></figure><h4 id="4-2-添加-kubernetes-的阿里镜像源"><a href="#4-2-添加-kubernetes-的阿里镜像源" class="headerlink" title="4.2 添加 kubernetes 的阿里镜像源"></a>4.2 添加 kubernetes 的阿里镜像源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;Kubernetes</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">repo_gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="4-3-安装-kubelet、-kubeadm、-kubectl-1-17-4是目前最新稳定版"><a href="#4-3-安装-kubelet、-kubeadm、-kubectl-1-17-4是目前最新稳定版" class="headerlink" title="4.3 安装 kubelet、 kubeadm、 kubectl  (1.17.4是目前最新稳定版)"></a>4.3 安装 kubelet、 kubeadm、 kubectl  (1.17.4是目前最新稳定版)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast -y</span><br><span class="line"></span><br><span class="line">yum list kubelet --showduplicates | sort -r </span><br><span class="line"></span><br><span class="line">yum install -y kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3</span><br><span class="line"></span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure><h4 id="4-4-命令补全"><a href="#4-4-命令补全" class="headerlink" title="4.4 命令补全"></a>4.4 命令补全</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~&#x2F;.bash_profile</span><br><span class="line">source .bash_profile </span><br></pre></td></tr></table></figure><hr><h2 id="五、-master-部署-此步骤仅在-master-上执行"><a href="#五、-master-部署-此步骤仅在-master-上执行" class="headerlink" title="五、 master 部署 (此步骤仅在 master 上执行)"></a>五、 master 部署 (此步骤仅在 master 上执行)</h2><h4 id="5-1-初始化集群"><a href="#5-1-初始化集群" class="headerlink" title="5.1 初始化集群"></a>5.1 初始化集群</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">  --apiserver-advertise-address&#x3D;192.168.56.116 \</span><br><span class="line">  --image-repository registry.aliyuncs.com&#x2F;google_containers \</span><br><span class="line">  --kubernetes-version v1.17.3 \</span><br><span class="line">  --service-cidr&#x3D;10.1.0.0&#x2F;16 \</span><br><span class="line">  --pod-network-cidr&#x3D;10.244.0.0&#x2F;16</span><br></pre></td></tr></table></figure><p>注意：记录 kubeadm join 的输出</p><h4 id="5-2-加载环境变量"><a href="#5-2-加载环境变量" class="headerlink" title="5.2 加载环境变量"></a>5.2 加载环境变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf&quot; &gt;&gt; ~&#x2F;.bash_profile</span><br><span class="line"></span><br><span class="line">source .bash_profile </span><br><span class="line"></span><br><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line"></span><br><span class="line">cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line"></span><br><span class="line">chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure><h4 id="5-3-安装-pod-网络-flannel"><a href="#5-3-安装-pod-网络-flannel" class="headerlink" title="5.3 安装 pod 网络 flannel"></a>5.3 安装 pod 网络 flannel</h4><blockquote><p>wget <a href="https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</a></p></blockquote><blockquote><p>因为墙的原因，所以将 kube-flannel.yml 文件中的 quay.io 全部替换为 quay-mirror.qiniu.com</p></blockquote><blockquote><p>kubectl apply -f kube-flannel.yml</p></blockquote><hr><h2 id="六、-加入-node-节点-在两台-node-机器上执行"><a href="#六、-加入-node-节点-在两台-node-机器上执行" class="headerlink" title="六、 加入 node 节点 (在两台 node 机器上执行)"></a>六、 加入 node 节点 (在两台 node 机器上执行)</h2><blockquote><p>根据 5.1 中的记录使用 kubeadm join 分别在两台 node 上执行加入集群，例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.56.116:6443 --token 42w1zg.6ffi04kj88c1kesn \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:69453c78d7e1c8d1f576e4b08bff84be29fb91b5e0584c67bdf226b85ceb548d</span><br></pre></td></tr></table></figure><blockquote><p>等待执行成功即可。</p></blockquote><hr><h4 id="附关于-token-相关内容："><a href="#附关于-token-相关内容：" class="headerlink" title="附关于 token 相关内容："></a>附关于 token 相关内容：</h4><ul><li>可在 master 上查看 token</li></ul><blockquote><p><code>kubeadm token list</code></p></blockquote><ul><li>master 上生成新的 token</li></ul><blockquote><p><code>kubeadm token create</code></p></blockquote><ul><li>master 上生成新的杂凑值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -pubkey -in &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.crt | openssl rsa -pubin -outform der 2&gt;&#x2F;dev&#x2F;null | \</span><br><span class="line">openssl dgst -sha256 -hex | sed &#39;s&#x2F;^.* &#x2F;&#x2F;&#39;</span><br></pre></td></tr></table></figure><ul><li>node 上使用新的 token 即可加入集群</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.56.116:6443 --token 1zl3he.fxgz2pvxa3qkwxln  --discovery-token-ca-cert-hash sha256:5f656ae26b5e7d4641a979cbfdffeb7845cc5962bbfcd1d5435f00a25c02ea50&#96;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令 -- kill</title>
      <link href="posts/ed1f1e03/"/>
      <url>posts/ed1f1e03/</url>
      
        <content type="html"><![CDATA[<p>Linux中的kill命令用来终止指定的进程，是Linux下常用的进程管理命令。通常可以用CTRL+C终止一个前台命令，但是对于一个后台进程就必须使用kill命令来终止，我们可以使用ps/pidof/pstree/top等工具获取进程PID，然后使用kill命令来杀掉该进程。kill命令通常是向进程发送指定的信号来结束进程的。在默认情况下，采用编号为15的TERM信号。TERM信号将终止所有不能捕获该信号的进程。对于那些不能捕获该信号的进程就要用编号为9的kill信号强行杀掉该进程。</p><p>命令格式：</p><pre><code>kill [参数] [进程号]</code></pre><p>命令功能：</p><pre><code>发送指定的信号到指定的进程。不指定信号将默认发送SIGTERM（15）信号终止指定进程。如果任然无法终止改程序可用“-kill”参数，即发送SIGKILL（9）信号强制结束进程。其中非root用户只能影响自己的进程。</code></pre><p>命令参数：</p><pre><code>-l 列出支持的全部信号名称-a 处理进程时，不限制命令名和进程号的对应关系-p 只打印相关进程号不发送任何信号-s 指定发送信号-u 指定用户</code></pre><ul><li>killall [参数] [进程名] 结束同名的所有进程，-I忽略大小写</li></ul><p>** 应注意，信号使进程强行终止，这常会带来一些副作用，如数据丢失或者终端无法恢复到正常状态。发送信号时必须小心，只有在万不得已时，才用kill信号(9)，因为进程不能首先捕获它。要撤销所有的后台作业，可以输入kill 0。因为有些在后台运行的命令会启动多个进程，跟踪并找到所有要杀掉的进程的PID是件很麻烦的事。这时，使用kill 0来终止所有由当前shell启动的进程，是个有效的方法。**</p><p>示例：</p><p>查看kill支持使用的所有信号</p><pre><code>ww@debian:~$ kill -l 1) SIGHUP     2) SIGINT     3) SIGQUIT     4) SIGILL     5) SIGTRAP 6) SIGABRT     7) SIGBUS     8) SIGFPE     9) SIGKILL    10) SIGUSR111) SIGSEGV    12) SIGUSR2    13) SIGPIPE    14) SIGALRM    15) SIGTERM16) SIGSTKFLT    17) SIGCHLD    18) SIGCONT    19) SIGSTOP    20) SIGTSTP21) SIGTTIN    22) SIGTTOU    23) SIGURG    24) SIGXCPU    25) SIGXFSZ26) SIGVTALRM    27) SIGPROF    28) SIGWINCH    29) SIGIO    30) SIGPWR31) SIGSYS    34) SIGRTMIN    35) SIGRTMIN+1    36) SIGRTMIN+2    37) SIGRTMIN+338) SIGRTMIN+4    39) SIGRTMIN+5    40) SIGRTMIN+6    41) SIGRTMIN+7    42) SIGRTMIN+843) SIGRTMIN+9    44) SIGRTMIN+10    45) SIGRTMIN+11    46) SIGRTMIN+12    47) SIGRTMIN+1348) SIGRTMIN+14    49) SIGRTMIN+15    50) SIGRTMAX-14    51) SIGRTMAX-13    52) SIGRTMAX-1253) SIGRTMAX-11    54) SIGRTMAX-10    55) SIGRTMAX-9    56) SIGRTMAX-8    57) SIGRTMAX-758) SIGRTMAX-6    59) SIGRTMAX-5    60) SIGRTMAX-4    61) SIGRTMAX-3    62) SIGRTMAX-263) SIGRTMAX-1    64) SIGRTMAX</code></pre><p>常见的信号有</p><pre><code>HUP     1    终端断线INT     2    中断（同 Ctrl + C）QUIT    3    退出（同 Ctrl + \）TERM   15    终止KILL    9    强制终止CONT   18    继续（与STOP相反， fg/bg命令）STOP   19    暂停（同 Ctrl + Z）</code></pre><p>kill默认无法杀死2324进程，使用-9选项强制杀死</p><pre><code>ww@debian:~$ ps -ef | grep vimroot      1990  1897  0 12:30 pts/0    00:00:00 vim /etc/mysql/my.cnf.fallbackww        2324  2006  1 12:37 pts/0    00:00:00 vim test/ssww        2335  2006  0 12:37 pts/0    00:00:00 grep vimww@debian:~$ kill 2324ww@debian:~$ ps -ef | grep vimroot      1990  1897  0 12:30 pts/0    00:00:00 vim /etc/mysql/my.cnf.fallbackww        2324  2006  0 12:37 pts/0    00:00:00 vim test/ssww        2349  2006  0 12:37 pts/0    00:00:00 grep vimww@debian:~$ kill -9 2324ww@debian:~$ ps -ef | grep vimroot      1990  1897  0 12:30 pts/0    00:00:00 vim /etc/mysql/my.cnf.fallbackww        2354  2006  0 12:37 pts/0    00:00:00 grep vim[1]+  已杀死               vim test/ssww@debian:~$ ps -ef | grep vimroot      1990  1897  0 12:30 pts/0    00:00:00 vim /etc/mysql/my.cnf.fallbackww        2362  2006  0 12:37 pts/0    00:00:00 grep vim</code></pre>]]></content>
      
      
      <categories>
          
          <category> Command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令 -- lsof</title>
      <link href="posts/aa81bac1/"/>
      <url>posts/aa81bac1/</url>
      
        <content type="html"><![CDATA[<p>lsof (list open files)是一个列出当前系统打开文件的工具。在Linux环境下，任何事物都是以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络链接和硬件。所以如传输控制协议（tcp）和用户数据报协议（udp）套接字等，系统在后台为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序于基础操作系统之间的交互提供了通用的接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能查看这个列表对系统监测以及排错将是有很大帮助的。</p><p>命令格式</p><p>lsof [参数] [文件]</p><p>命令功能</p><p>用于查看进程打开的文件，端口。找回、恢复删除的文件。</p><p>命令参数</p><p>-a 列出打开文件存在的进程</p><p>-c&lt;进程名&gt; 列出指定进程打开的文件</p><p>-g 列出GID号进程详情</p><p>+d&lt;目录&gt; 列出目录下被打开的文件</p><p>+D&lt;目录&gt; 递归列出目录下被打开的文件</p><p>-i 列出符合条件的进程（4、6、协议、端口、@ip）</p><p>示例</p><ol><li><p>不加参数</p><p> root@debian:~# lsof | head -n 20<br> COMMAND   PID TID TASKCMD               USER   FD      TYPE     DEVICE SIZE/OFF       NODE NAME<br> systemd     1                           root  cwd       DIR      254,1     4096          2 /<br> systemd     1                           root  rtd       DIR      254,1     4096          2 /<br> systemd     1                           root  txt       REG      254,1  1443404     662341 /usr/lib/systemd/systemd<br> systemd     1                           root  mem       REG      254,1  1066528     656039 /usr/lib/i386-linux-gnu/libm-2.28.so<br> systemd     1                           root  mem       REG      254,1   153068     659481 /usr/lib/i386-linux-gnu/libudev.so.1.6.13<br> systemd     1                           root  mem       REG      254,1   144840     656311 /usr/lib/i386-linux-gnu/libgpg-error.so.0.26.1<br> systemd     1                           root  mem       REG      254,1    46404     659376 /usr/lib/i386-linux-gnu/libjson-c.so.3.0.1<br> systemd     1                           root  mem       REG      254,1    50568     659375 /usr/lib/i386-linux-gnu/libargon2.so.1<br> systemd     1                           root  mem       REG      254,1   401416     656842 /usr/lib/i386-linux-gnu/libdevmapper.so.1.02.1<br> systemd     1                           root  mem       REG      254,1    34192     658756 /usr/lib/i386-linux-gnu/libuuid.so.1.3.0<br> systemd     1                           root  mem       REG      254,1    21812     655781 /usr/lib/i386-linux-gnu/libattr.so.1.1.2448<br> systemd     1                           root  mem       REG      254,1  2868032     659391 /usr/lib/i386-linux-gnu/libcrypto.so.1.1<br> systemd     1                           root  mem       REG      254,1   614756     659392 /usr/lib/i386-linux-gnu/libssl.so.1.1<br> systemd     1                           root  mem       REG      254,1    26136     655697 /usr/lib/i386-linux-gnu/libcap-ng.so.0.0.0<br> systemd     1                           root  mem       REG      254,1    17924     656038 /usr/lib/i386-linux-gnu/libdl-2.28.so<br> systemd     1                           root  mem       REG      254,1   488784     655764 /usr/lib/i386-linux-gnu/libpcre.so.3.13.3<br> systemd     1                           root  mem       REG      254,1   149124     656053 /usr/lib/i386-linux-gnu/libpthread-2.28.so<br> systemd     1                           root  mem       REG      254,1   378732     657121 /usr/lib/i386-linux-gnu/libblkid.so.1.1.0<br> systemd     1                           root  mem       REG      254,1   124444     656362 /usr/lib/i386-linux-gnu/liblz4.so.1.8.3</p></li></ol><p>说明：</p><p>COMMAND：进程名称</p><p>PID：进程标识符</p><p>PPID：父进程标识符（需要指定-R参数）</p><p>USER：进程所有者</p><p>PGID：进程所属组</p><p>FD：文件描述符，应用程序通过文件描述符识别该文件</p><p>2）列出某个文件相关进程</p><pre><code>root@debian:~# lsof /bin/bashCOMMAND PID USER  FD   TYPE DEVICE SIZE/OFF   NODE NAMEbash    452   ww txt    REG  254,1  1302248 656751 /usr/bin/bashbash    458 root txt    REG  254,1  1302248 656751 /usr/bin/bash</code></pre><p>3）列出某个进程打开的文件</p><pre><code>COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF   NODE NAMEbash    452   ww  cwd    DIR  254,1     4096 797082 /home/wwbash    452   ww  rtd    DIR  254,1     4096      2 /bash    452   ww  txt    REG  254,1  1302248 656751 /usr/bin/bashbash    452   ww  mem    REG  254,1    54908 656047 /usr/lib/i386-linux-gnu/libnss_files-2.28.sobash    452   ww  mem    REG  254,1    26400 658382 /usr/lib/i386-linux-gnu/gconv/gconv-modules.cachebash    452   ww  mem    REG  254,1  3246832 655804 /usr/lib/locale/locale-archivebash    452   ww  mem    REG  254,1  1947056 656036 /usr/lib/i386-linux-gnu/libc-2.28.sobash    452   ww  mem    REG  254,1    17924 656038 /usr/lib/i386-linux-gnu/libdl-2.28.sobash    452   ww  mem    REG  254,1   161928 656345 /usr/lib/i386-linux-gnu/libtinfo.so.6.1bash    452   ww  mem    REG  254,1   167244 655375 /usr/lib/i386-linux-gnu/ld-2.28.sobash    452   ww    0u   CHR  136,0      0t0      3 /dev/pts/0bash    452   ww    1u   CHR  136,0      0t0      3 /dev/pts/0bash    452   ww    2u   CHR  136,0      0t0      3 /dev/pts/0bash    452   ww  255u   CHR  136,0      0t0      3 /dev/pts/0bash    458 root  cwd    DIR  254,1     4096 917506 /rootbash    458 root  rtd    DIR  254,1     4096      2 /bash    458 root  txt    REG  254,1  1302248 656751 /usr/bin/bashbash    458 root  mem    REG  254,1   149124 656053 /usr/lib/i386-linux-gnu/libpthread-2.28.sobash    458 root  mem    REG  254,1    38868 656055 /usr/lib/i386-linux-gnu/librt-2.28.sobash    458 root  mem    REG  254,1   285204 665107 /usr/lib/i386-linux-gnu/libnss_systemd.so.2bash    458 root  mem    REG  254,1    54908 656047 /usr/lib/i386-linux-gnu/libnss_files-2.28.sobash    458 root  mem    REG  254,1    26400 658382 /usr/lib/i386-linux-gnu/gconv/gconv-modules.cachebash    458 root  mem    REG  254,1  3246832 655804 /usr/lib/locale/locale-archivebash    458 root  mem    REG  254,1  1947056 656036 /usr/lib/i386-linux-gnu/libc-2.28.sobash    458 root  mem    REG  254,1    17924 656038 /usr/lib/i386-linux-gnu/libdl-2.28.sobash    458 root  mem    REG  254,1   161928 656345 /usr/lib/i386-linux-gnu/libtinfo.so.6.1bash    458 root  mem    REG  254,1   167244 655375 /usr/lib/i386-linux-gnu/ld-2.28.sobash    458 root    0u   CHR  136,0      0t0      3 /dev/pts/0bash    458 root    1u   CHR  136,0      0t0      3 /dev/pts/0bash    458 root    2u   CHR  136,0      0t0      3 /dev/pts/0bash    458 root  255u   CHR  136,0      0t0      3 /dev/pts/0</code></pre><p>4）列出打开某个端口的进程</p><pre><code>root@debian:~# lsof -i :22COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAMEsshd    365 root    3u  IPv4  15176      0t0  TCP *:ssh (LISTEN)sshd    365 root    4u  IPv6  15187      0t0  TCP *:ssh (LISTEN)sshd    439 root    3u  IPv4  16512      0t0  TCP debian:ssh-&gt;192.168.122.1:41104 (ESTABLISHED)sshd    451   ww    3u  IPv4  16512      0t0  TCP debian:ssh-&gt;192.168.122.1:41104 (ESTABLISHED)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mariadb 简单配置</title>
      <link href="posts/921d9bcb/"/>
      <url>posts/921d9bcb/</url>
      
        <content type="html"><![CDATA[<h2 id="Mariadb-数据库配置"><a href="#Mariadb-数据库配置" class="headerlink" title="Mariadb 数据库配置"></a>Mariadb 数据库配置</h2><pre><code>    在system1上创建一个 MariaDB 数据库，名为 Contacts，并符合以下条件:    数据库应该包含来自数据库复制的内容，复制文件的 URL 为:http://classroom.example.com/pub/materials/users.sql:    数据库只能被 localhost 访问；    除了 root 用户，此数据库只能被用户 Raikon 查询，此用户密码为 atenorth ， root 用户的密码为 atenorth，同时不允许空密码登陆。    在系统 system1上使用数据库 Contacts，并使用相应的 SQL 查询以回答下列问题:    密码是 solicitous 的人的名字?    有多少人的姓名是 Barbara 同时居住在 Sunnyvale?</code></pre><hr><ul><li><p>安装数据库</p><pre><code>  &gt;# yum install -y mariadb-server mariadb</code></pre></li><li><p>启动数据库</p><pre><code>  &gt;# systemctl enable mariadb  &gt;# systemctl start mariadb</code></pre></li><li><p>设置防火墙</p><pre><code>  &gt;# firewall-cmd --permanent --add-service=mysql  &gt;# firewall-cmd --reload</code></pre></li><li><p>数据库安全控制</p><pre><code>  &gt;# mysql_secure_installation  &gt; 全部选择 Y ，并在设置 root 密码那一步设置题目要求的密码</code></pre></li><li><p>root 用户登录数据库并完成新建数据库的要求</p><pre><code>  &gt;# wget http://classroom.example.com/pub/materials/users.sql    下载题目文件  &gt;# mysql -uroot -p                                              注意 -u 和用户名之间建议连在一起写，即 -uroot 和 -uRaikon  &gt; CREATE DATABASE Contacts;                                     新建 Contacts 数据库  &gt; USE Contacts;                                                 进入 Contacts 数据库  &gt; source /root/users.sql;                                       导入数据  &gt; show tables;                                                  查看是否有数据导入</code></pre></li><li><p>设置 Raikon 等用户权限</p><pre><code>  &gt; GRANT select ON Contacts.* to Raikon@localhost IDENTIFIED BY &#39;atenorth&#39;;  &gt; DELETE FROM mysql.user WHERE Password=&#39;&#39;;                     删除空用户密码  &gt; exit                                                          退出数据库  &gt; mysql -uRaikon -p                                             测试 Raikon 用户登录权限</code></pre></li><li><p>数据库查询</p><pre><code>  &gt; SELECT name FROM base WHERE password=&#39;solicitous&#39;;  &gt; SELECT count(*) FROM base,location WHERE base.name=&#39;Barbara&#39; AND location.city=&#39;Sunnyvale&#39; AND base.id=location.id ;</code></pre></li></ul><p><strong>finish</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NFS 共享配置</title>
      <link href="posts/ab705277/"/>
      <url>posts/ab705277/</url>
      
        <content type="html"><![CDATA[<h2 id="NFS-共享配置"><a href="#NFS-共享配置" class="headerlink" title="NFS 共享配置"></a>NFS 共享配置</h2><pre><code>    在system1配置 NFS 服务，要求如下:    以只读的方式共享目录/public，同时只能被 example.com 域中的系统访问；    以读写的方式共享目录/protected，能被 example.com 域中的系统访问；    访问/protected 需要通过 Kerberos 安全加密，您可以使用下面 URL 提供的密钥:http://classroom.example.com/pub/keytabs/system1.keytab；    目录/protected 应该包含名为 project 拥有人为 ldapuser0 的子目录；    用户 ldapuser0 能以读写方式访问/protected/project。    在system2上挂载一个来自 system1.exmaple.com 的共享，并符合下列要求:    /public 挂载在下面的目录上/mnt/nfsmount；    /protected挂载在下面的目录上/mnt/nfssecure 并使用安全的方式，密钥下载 URL:http://classroom.example.com/pub/keytabs/system2.keytab；    用户 ldapuser0 能够在/mnt/nfssecure/project 上创建文件；    这些文件系统在系统启动时自动挂载。</code></pre><hr><p>system1 配置</p><ul><li><p>安装软件</p><pre><code>  &gt;# yum -y install nfs-utils rpcbind                                       默认 RedHat 已经安装好这俩软件了</code></pre></li><li><p>新建共享文件</p><pre><code>  &gt;# mkdir /public  &gt;# mkdir -p /protected/project</code></pre></li><li><p>修改配置文件</p><pre><code>  &gt;# vim /etc/sysconfig/nfs  RPCNFSDARGS=&quot;-V 4.2&quot;  &gt;# vim /etc/exports  /public        *.example.com(ro)  /protected     *.example.com(rw,sec=krb5p)</code></pre></li><li><p>修改权限</p><pre><code>  &gt;# chown ldapuser0 /protected/project</code></pre></li><li><p>下载 keytab 文件</p><pre><code>  &gt;# wget http://classroom.example.com/pub/keytabs/system1.keytab -O /etc/krb5.keytab</code></pre></li><li><p>启动 nfs</p><pre><code>  &gt;# systemctl enable nfs-server  &gt;# systemctl start nfs-server  &gt;# systemctl enable nfs-secure-server  &gt;# systemctl start nfs-secure-server</code></pre></li><li><p>防火墙配置</p><pre><code>  &gt;# firewall-cmd --permanent --add-service=nfs  &gt;# firewall-cmd --permanent --add-service=rpc-bind  &gt;# firewall-cmd --permanent --add-service=mountd  &gt;# firewall-cmd --reload</code></pre></li></ul><hr><p>system2 配置</p><ul><li><p>创建挂载点</p><pre><code>  &gt;# mkdir /mnt/nfsmount  &gt;# mkdir /mnt/nfssecure</code></pre></li><li><p>下载 keytab 文件</p><pre><code>  &gt;# wget http://classroom.example.com/pub/keytabs/system2.keytab -O /etc/krb5.keytab</code></pre></li><li><p>修改 /etc/fstab</p><pre><code>  server.example.com:/public      /mnt/nfsmount   nfs     defaults        0 0  server.example.com:/protected   /mnt/nfssecure  nfs     defaults,v4.2,sec=krb5p 0 0</code></pre></li><li><p>启动服务</p><pre><code>  &gt;# systemctl enable nfs-secure  &gt;# systemctl restart nfs-secure</code></pre></li><li><p>挂载</p><pre><code>  &gt;# mount -a  注：命令行挂载 &gt;# mount.nfs  server.example.com:/public  /mnt/nfsmount</code></pre></li><li><p>测试</p><pre><code>  &gt;# ssh ldapuser0@localhost  &gt;# klist                                            查看 Kerberos 凭证，没有获取凭证需要 kinit 获取  &gt;# touch /protected/project/file                    测试写权限</code></pre></li></ul><p><strong>finish</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postfix 配置</title>
      <link href="posts/c5fbbc44/"/>
      <url>posts/c5fbbc44/</url>
      
        <content type="html"><![CDATA[<h2 id="配置本地邮件服务器"><a href="#配置本地邮件服务器" class="headerlink" title="配置本地邮件服务器"></a>配置本地邮件服务器</h2><pre><code>    在系统system1上配置邮件服务，满足以下要求:    这些系统不接收外部发送来的邮件；    在这些系统上本地发送的任何邮件都会自动路由到smtp0.example.com；    从这些系统上发送的邮件显示来自于system1.example.com；      您可以通过在system1上发送邮件到本地用户 student 来测试您的配置，系统system2.example.com 上的用户 student 将会收到这封邮件。</code></pre><hr><ul><li><p>修改 postfix 配置文件(以 system1 为例)</p><pre><code>  &gt;# vim /etc/postfix/main.cf                             在文件最后加入下面内容  myhostname = system1.example.com  relayhost = [smtp0.example.com]                          自动路由配置  inet_interfaces = loopback-only                          监听回环网卡  myorigin = system1.example.com                             邮件显示  local_transport = error:local  mydestination =                                         内容为空</code></pre></li><li><p>重启服务</p><pre><code>  &gt;# systemctl restart postfix.service  &gt;# systemctl enable postfix.service</code></pre></li><li><p>同样配置 system2</p></li><li><p>测试</p><pre><code>  &gt;# echo &quot;test postfix&quot; | mail -s &quot;test1&quot; student  &gt;# su - student  &gt;# mail  &amp; 1</code></pre></li></ul><p><strong>finish</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Samba 多用户共享挂载</title>
      <link href="posts/ea9e95bb/"/>
      <url>posts/ea9e95bb/</url>
      
        <content type="html"><![CDATA[<h2 id="配置多用户-samba-挂载"><a href="#配置多用户-samba-挂载" class="headerlink" title="配置多用户 samba 挂载"></a>配置多用户 samba 挂载</h2><pre><code>    在system1通过 SMB 共享目录/devops，并满足以下要求:    共享名为 devops；    共享目录 devops 只能被 example.com 域中的客户端使用；    共享目录 devops 必须可以被浏览；    用户 kenji 必须能以读的方式访问此共享，该问密码是 atenorth；    用户 chihiro 必须能以读写的方式访问此共享，访问密码是 atenorth；    此共享永久挂载在 system2.example.com 上的/mnt/dev 目录，并使用用户 kenji 作为认证，任何用户可以通过用户 chihiro 来临时获取写的权限。</code></pre><hr><p>服务器</p><ul><li><p>创建共享目录</p><pre><code>  &gt;# mkdir /devops</code></pre></li><li><p>修改 /etc/samba/smb.conf</p><pre><code>  &gt;# vim /etc/samba/smb.conf  [devops]          path = /devops          browseable = yes          hosts allow = 172.25.0.          write list = chihiro</code></pre></li><li><p>设置用户</p><pre><code>  &gt;# useradd kenji  &gt;# useradd chihiro  &gt;# smbpasswd -a kenji  &gt;# smbpasswd -a chihiro</code></pre></li><li><p>权限配置</p><pre><code>  &gt;# setfacl -m u:chihiro:rwx /devops                      (使用 acl 为不同用户设置额外权限)</code></pre></li><li><p>selinux 设置</p><pre><code>  &gt;# chcon -t samba_share_t /devops</code></pre></li><li><p>重启服务</p><pre><code>  &gt;# systemctl restart smb nmb</code></pre></li></ul><p>客户端</p><ul><li><p>测试使用情况</p><pre><code>  &gt;# mkdir /mnt/dev  &gt;# mount.cifs //172.25.0.11/devops /mnt/dev -o user=kenji  &gt;# cd /mnt/dev &amp;&amp; ls  &gt;# touch kenji  touch: cannot touch : Permission denied        (正常因为无写权限)  &gt;# umount /mnt/dev  &gt;# mount.cifs //172.25.0.11/devops /mnt/dev -o user=chihiro            (可正常读写)</code></pre></li><li><p>永久挂载需要修改 /etc/fstab</p><pre><code>  &gt;# vim /etc/fstab  //172.25.0.11/devops /mnt/dev cifs defaults,multiuser,username=kenji,password=atenorth,sec=ntlmssp,_netdev 0 0</code></pre></li><li><p>测试挂载是否正常</p><pre><code>  &gt;# mount -a  &gt;# su - kenji                                               (切换到用户 kenji )  &gt;# touch kenji /mnt/dev                                     (无写权限不可创建)  &gt;# cifscreds add -u chihiro 172.25.0.11                     (临时获取 chihiro 的读写权限)  &gt;# touch kenji /mnt/dev                                     (可以创建文件，说明能够临时获取读写权限)</code></pre></li><li><p>finish</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Samba 共享简单配置</title>
      <link href="posts/eae0702d/"/>
      <url>posts/eae0702d/</url>
      
        <content type="html"><![CDATA[<h2 id="RedHat7-配置-samba-文件服务器"><a href="#RedHat7-配置-samba-文件服务器" class="headerlink" title="RedHat7 配置 samba 文件服务器"></a>RedHat7 配置 samba 文件服务器</h2><pre><code>在system1上通过 SMB 共享/common 目录:您的 SMB 服务器必须是 STAFF 工作组的一个成员；共享名必须为 common；只有 example.com 域内的客户端可以访问 common 共享；common 必须是可以浏览的；用户 harry 必须能够读取共享中的内容，如果需要的话，验证的密码是 migwhisk</code></pre><hr><ul><li><p>服务器安装 samba</p><ul><li><code>yum install -y samba</code></li><li><code>systemctl enable smb nmb</code></li><li><code>systemctl start smb nmb</code></li><li><code>firewall-cmd --permanent --add-service=samba</code></li><li><code>firewall-cmd --reload</code></li></ul></li><li><p>服务器修改 samba 配置文件</p><ul><li><p>vim /etc/samba/smb.conf</p><ul><li><p>修改 workgroup = STAFF</p></li><li><p>写入:</p><pre><code>  [common]              comment = common share              path = /common              hosts allow = 172.25.0.              browseable = yes</code></pre></li></ul></li></ul></li><li><p>服务器上新建 samba 共享文件夹并修改 selinux 安全文本</p><ul><li><code>mkdir /common</code>    新建共享文件夹(root用户建立的文件夹属组均为root注意权限设置)</li><li><code>chcon -t samba_share_t  /common</code>     修改文件夹 selinux 安全文本</li><li><code>semanage fcontext -a -t samba_share_t &quot;/common(/.*)?&quot;</code>    添加目录的默认安全上下文</li><li><code>restorecon -v /common/</code>    把文件或目录的安全上下文恢复到默认值</li></ul></li><li><p>服务器上新建用户</p><ul><li><code>useradd -s /sbin/nologin harry</code></li><li><code>smbpasswd -a harry</code>        smbpasswd 是 samba-client 包中的命令，使用需要先安装</li></ul></li><li><p>重启 samba 服务    <code>systemctl restart smb nmb</code></p></li><li><p>客户端验证</p><ul><li><code>yum install samba-client</code>    （安装 samba 客户端）</li><li><code>smbclient -U harry //172.25.0.11/common</code>     （登录 samba ）</li><li>使用 mount 挂载<ul><li><code>yum install cifs.utils</code></li><li><code>mount.cifs //172.25.0.11/common /mnt -o user=harry</code></li></ul></li></ul></li></ul><h2 id="samba-附录"><a href="#samba-附录" class="headerlink" title="samba 附录"></a>samba 附录</h2><ul><li><p>samba 、 nfs 、 ftp 的区别</p><ul><li><p>从名字上进行理解：</p><ul><li>FTP(文件传输协议)</li><li>NFS（网络文件系统）</li><li>samba 即smb（服务信息块）协议</li></ul></li><li><p>使用范围：</p><ul><li>ftp    本身是一个文件传输系统，支持任何操作系统使用</li><li>nfs    unix/linux 专用</li><li>smb    支持各种系统使用</li></ul></li><li><p>传输效率</p><ul><li>  ftp    专为文件传输设计的，传输效率最高，但是没传输一个文件需要重新打开端口协商</li><li>  nfs    属于远程文件系统映射，除了 RPC 远程映射的代价，连续读写效率非常高</li><li>  smb    设计之初就是用来传输小文件的，在大文件传输中效率最差</li></ul></li></ul></li><li><p>samba 使用的 daemon</p><ul><li><p>nmbd ：    这个 daemon 是用来管理工作组、NetBIOS name 等的解析。主要利用 UDP 协议开启 port 137, 138 来负责名称解析的任务；</p></li><li><p>smbd :        这个 daemon 的主要功能就是用来管理 SAMBA 主机分享的目录、档案与打印机等等。主要利用可靠的 TCP 协议来传输数据，开放的端口口为 139 及 445(不一定存在) 。</p></li></ul></li><li><p>samba 使用的联机模式</p><ul><li>peer/peer (Workgroup model, 对等模式)：    适用于小型办公场景，每台计算机都是服务器或者客户端，取得相应电脑上的资源就需要获得电脑用户的登录密码。使用 peer/peer 的架构的好处是每部计算机均可以独立运作，而不受他人的影响！不过， 缺点就是当整个网域内的所有人员都要进行数据分享时，光是知道所有计算机里面的账号与密码，就会很伤脑筋了！ 所以， Peer/Peer 的架构是比较适合 (1)小型的网域，或者是 (2)没有需要常常进行档案数据分享的网络环境，或者是 (3)每个使用者都独自拥有该计算机的拥有权(就是说，该计算机是用户的，而不是公用的！) 而，如果该单位的所有 PC 均是公有的 (例如学校的计算机教室环境)，而且你需要统一控管整个网域里面的账号与密码的话， 那就得使用底下的 domain models 了！</li><li>domain model (主控模式)：        既然使用计算机资源需要账号与密码， 那么我将所有的账号与密码都放置在一部主控计算机 (Primary Domain Controller, PDC) 上面，在我的网域里面，任何人想要使用任何计算机时，都需要在屏幕前方输入账号与密码，然后通通藉由 PDC 服务器的辨识后，才给予适当的权限。也就是说，不同的身份还具有不一样的计算机资源权限！</li></ul></li><li><p>samba 软件包功能说明</p><ul><li><p>samba：        这个软件主要提供了 SMB 服务器所需的各项服务程序 (smbd 及nmbd)、 的文件档、以及其他与 SAMBA 相关的 logrotate 配置文件及开机默认选项档案等；</p></li><li><p>samba-client：        这个软件则提供了当 Linux 做为 SAMBA Client 端时，所需要的工具指令，例如登录samba 的命令 smbclient、 取得相关树形图的 smbtree 、修改添加 samba 用户密码的 smbpasswd 等等；-</p></li><li><p>cifs-utils:        用来挂载 cifs 的命令，例 <code>mount.cifs //172.25.0.11/common /mnt -o user=harry</code></p></li><li><p>samba-common:        这个软件提供的则是服务器与客户端都会使用到的数据</p></li></ul></li><li><p>samba 配置文件： smb.conf 的主要功能选项</p><ul><li><p>security = user|share|domain            (三选一，默认为 user)</p><pre><code>  share：分享的数据不需要密码，大家均可使用 (没有安全性)；  user ：使用 SAMBA 服务器本身的密码数据库，密码数据库与底下的passdb backend 有关；  domain：使用外部服务器的密码，亦即 SAMBA 是客户端之意，如果设定这个项目， 你还得要提供『password server = IP』的设定值才行；</code></pre></li><li><p>encrypt passwords = Yes</p><pre><code>  代表密码要加密，注意那个 passwords 要有 s 才对！</code></pre></li><li><p>passdb backend = 数据库格式</p><pre><code>  如前所述，为了加快速度， 目前密码文件已经转为使用数据库了！默认的数据库格式 tdbsam ，而预设的档案为 /var/lib/samba/private/passwd.tdb</code></pre></li><li><p>分享资源的相关参数设定     [分享的名称]</p><pre><code>  [分享名称] ：这个分享名称很重要，它是一个『代号』  browseable ：是否让所有的用户看到这个项目  writable ：是否可以写入？这里需要注意一下喔！那个 read only 与writable 是两个相似的设定值。如果 writable 在这里设定为 yes ，read only 同时设定为 yes ，哪个是正确的设定？答案是：最后出现的那个设定值为主要的设定！  create mode 与 directory mode 都与权限有关的  writelist = 用户, @群组，这个项目可以指定能够进入到此资源的特定使用者。 如果是 @group 的格式，则加入该群组的使用者均可取得使用的权限，设定上会比较简单！</code></pre></li><li><p>pdbedit</p><pre><code>   -L ：列出目前在数据库当中的账号与 UID 等相关信息；   -v ：需要搭配 -L 来执行，可列出更多的讯息，包括家目录等数据；   -w ：需要搭配 -L 来执行，使用旧版的 smbpasswd 格式来显示数据；   -a ：新增一个可使用 Samba 的账号，后面的账号需要在 /etc/passwd 内存在；   -r ：修改一个账号的相关信息，需搭配很多特殊参数，请 man pdbedit；   -x ：删除一个可使用 Samba 的账号，可先用 -L 找到账号后再删除；   -m ：后面接的是机器的代码 (machine account)，与 domain model 有关！</code></pre><ul><li><p>常用命令：</p><pre><code>   pdbedit -L [-vw] &lt;==单纯的察看帐户信息   pdbedit -a|-r|-x -u 账号 &lt;==新增/修改/删除账号   pdbedit -a -m -u 机器账号 &lt;==与 PDC 有关的机器码</code></pre></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Samba 文件共享服务</title>
      <link href="posts/b902a5ac/"/>
      <url>posts/b902a5ac/</url>
      
        <content type="html"><![CDATA[<p>软件包</p><p>####centos</p><ul><li><p>samba</p></li><li><p>samba-client</p></li><li><p>samba-common</p></li></ul><p>####debian</p><ul><li><p>samba</p></li><li><p>samba-client</p></li><li><p>samba-common</p></li></ul><p>守护进程</p><p>smb（smbd）</p><p>提供文件共享和打印机共享</p><p>提供用户权限的认证和解锁</p><p>tcp 139 445</p><p>nmb（nmbd）</p><p>提供NETBIOS名称解析服务</p><p>Common Internet File System （cifs） mount.cifs 由cifs-utils包提供</p><p>udp 137</p><p>快速配置</p><p>服务端</p><p>安装Samba软件包</p><p>创建共享目录</p><p>修改配置文件（/etc/samba/smb.conf) debian上的配置文件是/etc/smb.conf</p><p>vim /etc/samba/smb.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[share] #共享名称</span><br><span class="line">comment &#x3D; share for mysel #共享描述</span><br><span class="line">path &#x3D; &#x2F;common #之前创建的共享目录</span><br><span class="line">browseable &#x3D; YES #所有人可见</span><br><span class="line">guest ok &#x3D; NO #拒绝匿名用户访问</span><br><span class="line">writable &#x3D; YES #数据可写</span><br></pre></td></tr></table></figure><p>修改selinux上下文权限(可能会需要在selinux是enforcing状态下修改)</p><p>chcon -t samba_share_t /common</p><p>创建Samba共享访问账户</p><p>useradd -s /sbin/nologin harry</p><p>smbpasswd -a harry</p><p>-a 添加Samba账户并设置密码</p><p>-x 删除Samba用户</p><p>-d 禁用Samba账户</p><p>-e 启用Samba账户</p><p>启动服务</p><p>systemctl restart smb nmb</p><p>systemctl enable smb nmb</p><p>设置防火墙</p><p>firewall-cmd –permanent –add-service=samba</p><p>firewall-cmd –reload</p><p>setenforce 0 (或者vim /etc/selinux/config设置为disable并重启)</p><p>客户端</p><p>Windows开启网络映射方便使用</p><p>Linux桌面客户端同样容易连接</p><p>Android使用es文件浏览器访问</p><p>Linux 命令行：</p><p>登录：smbclient -U harry //192.168.x.x /common</p><p>挂载：yum install cifs-utils</p><p>mount.cifs //192.168.x.x  /common /mnt/smbshare -o user=harry</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令 -- scp</title>
      <link href="posts/542c15c7/"/>
      <url>posts/542c15c7/</url>
      
        <content type="html"><![CDATA[<p>scp是secure copy的简写，用于在Linux下进行远程拷贝文件命令。它和cp类似，不过cp只能在本机进行拷贝。scp是加密的传输但是也会稍微影响速度。当你服务器硬盘变为只读read only system时，用scp可以帮你把文件移出来。另外，scp只占用很少的资源不会提法哦多少系统复核，在这一点上rsync就远不及它了。虽然rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。</p><p>命令格式：</p><p>scp [参数] [原路径] [目标路径]</p><p>命令参数：</p><p>-1 强制scp命令使用ssh1协议</p><p>-2 强制scp命令使用shh2协议</p><p>-4 强制scp命令使用ipv4</p><p>-6 强制scp命令使用ipv6</p><p>-B 使用批处理模式（避免重复询问口令）</p><p>-C 允许压缩（将-C标志传递给ssh，从而打开压缩功能）</p><p>-p 保留源文件的修改时间，访问时间和访问权限</p><p>-q 不显示传输进度条</p><p>-r 递归复制整个目录</p><p>-P port 指定数据传输用的端口</p><p>-i identity_file 指定传输使用的秘钥文件</p><p>示例：</p><p>1)复制文件</p><pre><code># ww @ way-archlinux in ~ [8:37:42]$ touch ww# ww @ way-archlinux in ~ [8:37:53]$ scp ww ww@192.168.122.70:/tmpww@192.168.122.70&#39;s password:ww                                            100%    0     0.0KB/s   00:00</code></pre>]]></content>
      
      
      <categories>
          
          <category> Command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh 访问控制</title>
      <link href="posts/57e3f167/"/>
      <url>posts/57e3f167/</url>
      
        <content type="html"><![CDATA[<h2 id="SSH-访问控制"><a href="#SSH-访问控制" class="headerlink" title="SSH 访问控制"></a>SSH 访问控制</h2><blockquote><p>按以下要求配置 SSH 访问:<br>用户能够从域内 example.com 的客户端SSH远程访问您的两个虚拟机系统<br>在域 my133t.org 内的客户端不能访问您的两个虚拟机系统</p></blockquote><ul><li><p>方法一</p><ul><li><p>编辑配置文件 /etc/hosts.deny</p><p>  添加<code>sshd:.my133t.org</code> 或 <code>sshd:172.25.0.</code></p><p>  注意 /etc/hosts.allow 和 /etc/hosts.deny 配置同一网段时，/etc/hosts.allow 有效，配置域名和 ip 时可以使用 . 省略</p></li></ul></li><li><p>方法二</p><ul><li><p>配置防火墙的富规则</p><pre><code>  # firewall-cmd  --permanent --zone=public --add-rich-rule &#39;rule family=ipv4 source address=172.25.0.10 service name=ssh reject&#39;  # firewall-cmd --reload</code></pre><p>注:</p><ul><li>可以使用 <code>firewall-cmd --get-services</code> 查看防火墙富规则支持的服务名称</li><li>可以使用 <code>firewall-cmd --list-rich-rules</code> 查看当前防火墙设置的富规则</li><li>配置文件位于 <code>/etc/firewalld/zones/public.xml</code></li><li>可以使用 <code>firewall-cmd --remove-rich-rule ···</code> 删除某条富规则</li><li>也可以直接删除配置文件中对应的规则条目</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04 搭建 nextcloud</title>
      <link href="posts/98b68ccc/"/>
      <url>posts/98b68ccc/</url>
      
        <content type="html"><![CDATA[<p>nextcloud 是目前开源社区最火的云项目，是个人云存储最理想的选择</p><p>手中正好有一部媳妇淘汰的小米MAX（骁龙650 + 32G + 4850mAh）电池性能任然很好，开 WiFi 跑 ubuntu 大概可用六天，于是开始了手动搭建私有云盘</p><p>材料：</p><ul><li>MI MAX （Root + MIUI10.2）</li><li>linuxdeploy（安卓跑linux的软件需要完全root）</li><li>busybox （linuxdeploy支持包）</li><li>ubuntu18.04 （armhf）</li><li>nextcloud16.03</li><li>php 7.2.6</li><li>apache2</li><li>mariadb 10.1</li></ul><p>本文仅介绍 ubuntu18.04 下搭建 nextcloud 16.03 全过程，不涉及手机 Root 及 ubuntu 的安装，有兴趣可自行了解。</p><p>第一步：安装 Apache2</p><p>nextcloud 需要一个 web 服务器，这里选用的 web 服务器是 Apache2。通过运行以下命令安装：</p><p>sudo apt-get update</p><p>sudo apt-get install apache2</p><p>安装 Apache2 后，运行以下命令禁用目录列表。</p><p>sudo sed -i “s/Options Indexes FollowSymLinks/Options FollowSymLinks/“ /etc/apache2/apache2.conf</p><p>启动 Apache2 服务</p><p>sudo systemctl restart apache2</p><p>第二步：安装 mariadb</p><p>NextCloud还需要一个数据库服务器…… MariaDB数据库服务器是一个很好的选择。运行以下命令安装</p><p>sudo apt install mariadb-server mariadb-client</p><p>启动 mariadb 服务</p><p>sudo systemctl rsetart mysql</p><p>之后运行以下命令为 mariadb 设置安全模块</p><p>sudo mysql_secure_installation</p><p>出现提示是，按照以下输入。</p><p>Enter current password for root (enter for none): Enter</p><p>Set root password? [Y/n]:Y</p><p>New password: Enter password</p><p>Re-enter new password: Repeat password</p><p>Remove anonymous users? [Y/n]: Y</p><p>Disallow root login remotely? [Y/n]: Y</p><p>Remove test database and access to it? [Y/n]: Y</p><p>Reload privilege tables now? [Y/n]: Y</p><p>设置远程访问</p><p>sudo vim /etc/mysql/my.cnf (不同版本位置不完全相同，亦可能为/etc/mysql/mariadb.conf.d/50-server.cnf)</p><p>删除 bind-address = 127.0.0.1 这一行</p><p>保存退出</p><p>重启 mariadb 服务</p><p>sudo systemctl restart mysql</p><p>第三步：安装 PHP 及相关模块</p><p>sudo apt install php7.2 libapache2-mod-php7.2 php7.2-common php7.2-mbstring php7.2-xmlrpc php7.2-soap php7.2-apcu php7.2-smbclient php7.2-ldap php7.2-redis php7.2-gd php7.2-xml php7.2-intl php7.2-json php7.2-imagick php7.2-mysql php7.2-cli php7.2-mcrypt php7.2-ldap php7.2-zip php7.2-curl</p><p>** sudo apt install php7.2***</p><p>安装 php 后，运行以下命令打开 FPM PHP 默认文件</p><p>sudo vim /etc/php7.2/apache2/php.ini</p><p>修改以下内容并保存</p><p>file_uploads = On</p><p>allow_url_fopen = On</p><p>memory_limit = 256M</p><p>upload_max_filesize = 100M</p><p>display_errors = Off</p><p>第四步：创建 nextcloud 数据库</p><p>登录 mariadb 服务器</p><p>sudo mysql -uroot -p</p><p>创建 nextcloud 数据库</p><p>create database nextcloud;</p><p>创建 nextclouduser 用户</p><p>CREATE USER ‘nextclouduser’@’localhost’ IDENTIFIED BY ‘new_password_here’;</p><p>赋予新建的用户对数据库完全访问权限</p><p>GRANT ALL ON nextcloud.* TO ‘nextclouduser’@’localhost’ IDENTIFIED BY ‘user_password_here’ WITH GRANT OPTION;</p><p>最后保存退出</p><p>FLUSH PRIVILEGES;</p><p>exit;</p><p>第五步：下载 nextcloud16.03</p><p>wget <a href="https://download.nextcloud.com/server/releases/nextcloud-16.0.3.zip">https://download.nextcloud.com/server/releases/nextcloud-16.0.3.zip</a></p><p>解压后移动到 Apache2 根目录下</p><p>unzip nextcloud-16.0.3.zip;sudo mv nextcloud /var/www/html/nextcloud</p><p>为 nextcloud 目录设置正确的权限</p><p>sudo chown -R www-data:www-data /var/www/html/nextcloud/</p><p>sudo chmod -R 755 /var/www/html/nextcloud/</p><p>第六步：配置 Apache2</p><p>为 nextcloud 配置 Apache2 站点配置文件。此文件用于控制用户访问 nextcloud 内容的方式。</p><p>sudo vim /etc/apache2/sites-avaiable/nextcloud.conf</p><p>将以下内容粘贴保存到 nextcloud.conf 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">     ServerAdmin admin@example.com</span><br><span class="line">     DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;nextcloud&#x2F;</span><br><span class="line">     ServerName example.com</span><br><span class="line">     ServerAlias www.example.com</span><br><span class="line">     Alias &#x2F;nextcloud &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;nextcloud&#x2F;&quot;</span><br><span class="line">     &lt;Directory &#x2F;var&#x2F;www&#x2F;html&#x2F;nextcloud&#x2F;&gt;</span><br><span class="line">        Options +FollowSymlinks</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Require all granted</span><br><span class="line">          &lt;IfModule mod_dav.c&gt;</span><br><span class="line">            Dav off</span><br><span class="line">          &lt;&#x2F;IfModule&gt;</span><br><span class="line">        SetEnv HOME &#x2F;var&#x2F;www&#x2F;html&#x2F;nextcloud</span><br><span class="line">        SetEnv HTTP_HOME &#x2F;var&#x2F;www&#x2F;html&#x2F;nextcloud</span><br><span class="line">     &lt;&#x2F;Directory&gt;</span><br><span class="line">     ErrorLog $&#123;APACHE_LOG_DIR&#125;&#x2F;error.log</span><br><span class="line">     CustomLog $&#123;APACHE_LOG_DIR&#125;&#x2F;access.log combined</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>保存后退出</p><p>链接子目录配置文件</p><p>sudo ln -s /etc/apache2/sites-available/nextcloud.conf /etc/apache2/sites-enabled/nextcloud.conf</p><p>更改网站默认目录</p><p>sudo vim /etc/apache2/sites-available/000-default.conf</p><p>修改以下内容</p><p>DocumentRoot /var/www/html/nextcloud</p><p>添加模块</p><p>sudo a2ensite nextcloud.conf</p><p>sudo a2enmod rewrite</p><p>sudo a2enmod headers</p><p>sudo a2enmod env</p><p>sudo a2enmod dir</p><p>sudo a2enmod mime<br>重启 Apache2</p><p>sudo systemctl restart apache2</p><p>第七步：初始化 nextcloud<br>浏览器输入</p><p>http://服务器IP</p><p>可以访问到 nextcloud 设置页面。使用刚才创建的信息链接到数据库即可完成。</p><p>稍等俩分钟后安装完成</p><p>finish</p><p>Now all the well !</p><p>任务完成 ！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 更换中科大 arm 源</title>
      <link href="posts/f7d05c2a/"/>
      <url>posts/f7d05c2a/</url>
      
        <content type="html"><![CDATA[<p>我之前在小米Max上通过linuxdeploy安装aarch64架构的ubuntu18.04之后，使用默认的软件源速度很慢，于是就更换了中科大的源</p><p>更换方法：</p><p>以root身份打开 /etc/apt/sources.list ，至于用什么打开随意</p><p>将 <a href="http://ports.ubuntu.com/">http://ports.ubuntu.com/</a> 全部替换为 <a href="http://mirrors.ustc.edu.cn/ubuntu-ports/">http://mirrors.ustc.edu.cn/ubuntu-ports/</a></p><p>更换中科大arm源给出的示例是ubuntu16.04,所以我们还需要把 xenial 替换成 bionic</p><p>执行 sudo apt-get update 和 sudo apt-get upgrade 测试完成</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令 -- vmstat</title>
      <link href="posts/ebf27c07/"/>
      <url>posts/ebf27c07/</url>
      
        <content type="html"><![CDATA[<p>vmstat是virtual memory statistics的缩写，可对系统的虚拟内存，进程，cpu活动进行监控。它是对系统的整体情况进行统计。不足之处是无法对某个进程进行深入分析。</p><p><strong>虚拟内存原理</strong><br>在系统中运行的每个进程都需要使用到内存，但不是每个进程每时每刻都需要使用系统分配的内存空间。当系统运行所需内存超过实际的物理内存，内核会释放某些进程所占用但未使用的部分，将这部分资料存储在磁盘上直到进程下一次调用，并将释放出的内存提供给有需要的进程使用。</p><p>在Linux内存管理中，主要是通过调页（paging）和交换（swapping）来完成上述的内存调度。调页算法是将内存中最近不常使用的页面换到磁盘上，把活动页面保留在内存中供进程使用。交换技术是将整个进程，而不是部分页面全部交换到磁盘上。分页(Page)写入磁盘的过程被称作Page-Out，分页(Page)从磁盘重新回到内存的过程被称作Page-In。当内核需要一个分页时，但发现此分页不在物理内存中(因为已经被Page-Out了)，此时就发生了分页错误（Page Fault）。</p><p>当系统内核发现可运行内存变少时，就会通过Page-Out来释放一部分物理内存。经管Page-Out不是经常发生，但是如果Page-out频繁不断的发生，直到当内核管理分页的时间超过运行程式的时间时，系统效能会急剧下降。这时的系统已经运行非常慢或进入暂停状态，这种状态亦被称作thrashing(颠簸)。</p><p>命令格式</p><p>vmstat [options] [delay [count]]</p><p>命令选项</p><p>-a 显示活跃和非活跃内存</p><p>-f 显示系统启动至今的fork数量</p><p>-m 显示slabinfo</p><p>-n 只在开始时显示一次字段名称</p><p>-s 显示内存相关统计信息及多种系统活动数量</p><p>delay 刷新时间间隔。如果不指定只显示一条结果</p><p>count 刷新次数，如果不指定刷新次数，但指定了时间间隔则次数为无穷</p><p>-d 显示磁盘相关统计信息</p><p>-p 显示指定磁盘分区统计信息</p><p>-S 使用指定单位显示，单位有k，K，m，M。默认为K</p><p>示例</p><ol><li><p>不加参数</p><p> root@debian:~# vmstat<br> procs ———–memory———- —swap– —–io—- -system– ——cpu—–<br>  r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st<br>  0  0   3080  67748   9440 108576    0    0    34    11   15   30  0  0 99  1  0</p></li></ol><p>说明：</p><p>Procs（进程）：</p><p>r: 运行队列中进程数量</p><p>b: 等待IO的进程数量</p><p>Memory（内存）：</p><p>swpd: 使用虚拟内存大小</p><p>free: 可用内存大小</p><p>buff: 用作缓冲的内存大小</p><p>cache: 用作缓存的内存大小</p><p>Swap：</p><p>si: 每秒从交换区写到内存的大小</p><p>so: 每秒写入交换区的内存大小</p><p>IO：（现在的Linux版本块的大小为1024bytes）</p><p>bi: 每秒读取的块数</p><p>bo: 每秒写入的块数</p><p>systemc：</p><p>in: 每秒中断数，包括时钟中断。</p><p>cs: 每秒上下文切换数。</p><p>CPU（以百分比表示）：</p><p>us: 用户进程执行时间(user time)</p><p>sy: 系统进程执行时间(system time)</p><p>id: 空闲时间(包括IO等待时间),中央处理器的空闲时间 。以百分比表示。</p><p>wa: 等待IO时间</p><p>如果 r经常大于 4 ，且id经常少于40，表示cpu的负荷很重。如果bi，bo 长期不等于0，表示内存不足。如果disk 经常不等于0， 且在 b中的队列 大于3， 表示 io性能不好。Linux在具有高稳定性、可靠性的同时，具有很好的可伸缩性和扩展性，能够针对不同的应用和硬件环境调整，优化出满足当前应用需要的最佳性能。因此企业在维护Linux系统、进行系统调优时，了解系统性能分析工具是至关重要的。</p><p>2）指定刷新间隔和次数且单位换成M</p><pre><code>root@debian:~# vmstat 5 5 -S Mprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st 0  0      3     33     29    118    0    0    34    10   16   37  0  0 99  1  0 0  0      3     33     29    118    0    0     0     0   13   23  0  0 100  0  0 0  0      3     33     29    118    0    0     0     0   14   24  0  0 100  0  0 0  0      3     33     29    118    0    0     0     0   13   22  0  0 100  0  0 0  0      3     33     29    118    0    0     0     0   12   19  0  0 100  0  0</code></pre><p>3）查看系统fork数量</p><pre><code>root@debian:~# vmstat -f          928 forks</code></pre><p>4）查看内存使用的详细信息</p><pre><code>root@debian:~# vmstat -s       226720 K total memory        41572 K used memory        89680 K active memory        49040 K inactive memory        33928 K free memory        30072 K buffer memory       121148 K swap cache      1046524 K total swap         3080 K used swap      1043444 K free swap          780 non-nice user cpu ticks            0 nice user cpu ticks          681 system cpu ticks       936078 idle cpu ticks         5379 IO-wait cpu ticks            0 IRQ cpu ticks           14 softirq cpu ticks           83 stolen cpu ticks       309795 pages paged in        93628 pages paged out          248 pages swapped in          796 pages swapped out       153866 interrupts       347505 CPU context switches   1569648735 boot time          929 forks</code></pre><p>这些数据来自于/proc/meminfo , /proc/stat , /proc/vmstat</p><p>5）查看磁盘的读写</p><pre><code>root@debian:~# vmstat -ddisk- ------------reads------------ ------------writes----------- -----IO------       total merged sectors      ms  total merged sectors      ms    cur    secvda    13506    109  619590  138858   2451   2724  187256  117260      0     40sr0        0      0       0       0      0      0       0       0      0      0</code></pre><p>6）查看/dev/vda1 的读写</p><pre><code>root@debian:~# vmstat -p /dev/vda1vda1            reads      read sectors      writes  requested writes                13179            609378        1652            180888</code></pre><p>这些信息主要来自于/proc/diskstats。</p><p>reads:来自于这个分区的读的次数。</p><p>read sectors:来自于这个分区的读扇区的次数。</p><p>writes:来自于这个分区的写的次数。</p><p>requested writes:来自于这个分区的写请求次数。</p>]]></content>
      
      
      <categories>
          
          <category> Command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令 -- wget</title>
      <link href="posts/3fe0f831/"/>
      <url>posts/3fe0f831/</url>
      
        <content type="html"><![CDATA[<p>wget是一个下载文件的工具，它用在命令行下。对于Linux用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。wget支持HTTP，HTTPS和FTP协议，可以使用HTTP代理。wget 非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性。如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。</p><p>命令格式：</p><p>wget [参数] [URL地址]</p><p>命令参数：</p><p>-h, -help 打印语法帮助</p><p>-b, -background 启动后转入后台执行</p><p>-O, –output-document=FILE 命名下载后的文件（大写的O）</p><p>-c, –continue 接着下载没有下载完成的文件，断点续传</p><p>-P, –directory-prefix=PREFIX 指定下载目录</p><p>-i, –input-file=FILE 参数后接FILE中每一行是一个URL</p>]]></content>
      
      
      <categories>
          
          <category> Command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum 仓库配置</title>
      <link href="posts/3ce03593/"/>
      <url>posts/3ce03593/</url>
      
        <content type="html"><![CDATA[<h2 id="yum-配置本地仓库"><a href="#yum-配置本地仓库" class="headerlink" title="yum 配置本地仓库"></a>yum 配置本地仓库</h2><ul><li><p>yum 仓库在 /etc/yum.repos.d 目录中</p></li><li><p>以下添加名为 rhce.repo 的本地 yum 仓库</p><p>  <code>vim /etc/yum.repos.d/rhce.repo</code></p><pre><code>  # cat /etc/yum.repos.d/rhce.repo  [rhce]  gpgcheck = 0  enabled = 1  baseurl = http://content.example.com/rhel7.0/x86_64/dvd  # yum clean all  # yum makecache  # yum repolist enabled|disabled                     查看启用|禁用的仓库</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux 配置 zsh 通配符</title>
      <link href="posts/c5d505ca/"/>
      <url>posts/c5d505ca/</url>
      
        <content type="html"><![CDATA[<p>默认情况下 zsh 是不支持通配符 * 匹配的</p><p>添加下面一条命令到~/.zshrc中即可：</p><p>set nonomatch</p><p>然后重启或者执行</p><p>source ~/.zshrc</p>]]></content>
      
      
      <categories>
          
          <category> Archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Archlinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态 web 服务配置</title>
      <link href="posts/aafb31e5/"/>
      <url>posts/aafb31e5/</url>
      
        <content type="html"><![CDATA[<h2 id="实现动态-web-内容"><a href="#实现动态-web-内容" class="headerlink" title="实现动态 web 内容"></a>实现动态 web 内容</h2><pre><code>    在system1上配置提供动态 Web 内容，要求如下:    动态内容由名为 webapp0.example.com 的虚拟主机提供    虚拟主机侦听在端口 8909    从 http://classroom.example.com/pub/materials/webinfo.wsgi 下载一个脚本，然后放在适当的位置，无论如何不要修改此文件的内容    客户端访问 http://webapp0.example.com:8909 可接收到动态生成的 Web 页    此 http://webapp0.example.com:8909 必须能被 example.com 域内的所有系统访问</code></pre><hr><ul><li><p>安装软件</p><pre><code>  &gt;# yum install -y mod_wsgi</code></pre></li><li><p>查看配置文档</p><pre><code>  &gt;# rpm -ql mod_wsgi</code></pre></li><li><p>下载脚本</p><pre><code>  &gt;# wget http://classroom.example.com/pub/materials/webinfo.wsgi -O /var/www/cgi-bin/</code></pre></li><li><p>修改配置文件</p><pre><code>  &gt;# vim /etc/httpd/conf.d/web.conf                                          末尾加入以下内容  Listen 8909  &lt;VirtualHost *:8909&gt;  DocumentRoot /var/www/webapp0  ServerName webapp0.example.com  WSGIScriptAlias / /var/www/webapp0/webinfo.wsgi  &lt;/VirtualHost&gt;</code></pre></li></ul><ul><li><p>修改 selinux</p><pre><code>  &gt;# semanage port -a -t http_port_t -p tcp 8909</code></pre></li><li><p>设置防火墙</p><pre><code>  &gt;# firewall-cmd --permanent --add-port=8909/tcp  &gt;# firewall-cmd --reload</code></pre></li><li><p>重启 apache</p><pre><code>  &gt;# systemctl restart httpd</code></pre></li></ul><p><strong>finish</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双系统 win10 更新后无法进入 Linux</title>
      <link href="posts/a4497726/"/>
      <url>posts/a4497726/</url>
      
        <content type="html"><![CDATA[<p>我的笔记本上安装了win10和archlinux双系统，更新win10 1809后只能进入win10了（跳过grub直接进入win10，就像win10单系统一样）</p><p>估计是win10大更之后直接覆盖了grub内容</p><p>解决方法是通过archlinux的U盘启动盘重写grub</p><p>具体内容如下：</p><p>一、 制作archlinuxU盘启动盘</p><p>　　很简单就是把archlinux的镜像写入U盘就行</p><p>二、 进入arch-chroot</p><p>　　这也和安装archlinux时一样的操作，把U盘插到电脑上，用U盘进行引导，然后选择第一项进入；</p><p>　　使用命令 lsblk 查看你的磁盘分区，找到自己的 /分区和 /boot分区 挂载，例如：</p><p>　　mount /dev/sda/mnt #sda这里指的是你的磁盘 / 分区对应的实际名称，如sda7</p><p>　　mount /dev/sda* /mnt/boot #sda*这里指的是你的磁盘 /boot 分区对应的实际名称，如sda2</p><p>　　接下来使用命令进入arch-chroot</p><p>　　arch-chroot /mnt</p><p>三、 重新安装grub</p><p>　　grub-install –target=x86_64-efi –efi-directory=/boot –bootloader-id=grub –recheck</p><p>　　安装成功后会显示</p><p>　　Installation finished. No error reported.</p><p>四、 生成配置文件</p><p>　　grub-mkconfig -o /boot/grub/grub.cfg</p><p>　　执行上面的命令后会有 vmlinuz 和 windows 条目相关的字眼出现，这时引导就已经修复完成重启电脑之后就能正常双系统引导了（如果执行完上面的命令没有windows相关的信息出现，也不用担心，重启电脑后再次进入arch-chroot执行上述命令就好）</p><p>End</p>]]></content>
      
      
      <categories>
          
          <category> Archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Archlinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全 web 服务器配置</title>
      <link href="posts/1d67d2f1/"/>
      <url>posts/1d67d2f1/</url>
      
        <content type="html"><![CDATA[<h2 id="配置安全-web-服务"><a href="#配置安全-web-服务" class="headerlink" title="配置安全 web 服务"></a>配置安全 web 服务</h2><pre><code>    为站点 http://system1.example.com 配置 TLS 加密:    已签名证书从 http://classroom.example.com/pub/tls/certs/system1.crt 获取 ；    证书的密钥从 http://classroom.example.com/pub/tls/private/system1.key 获取；    证书的签名授权信息从 http://classroom.example.com/pub/example-ca.crt 获取。</code></pre><hr><ul><li><p>安装认证软件</p><pre><code>  &gt;# yum install mod_ssl –y</code></pre></li><li><p>下载证书和密钥</p><pre><code>  &gt;# mkdir /etc/httpd/cert &amp;&amp; cd /etc/httpd/cert  &gt;# wget http://classroom.example.com/pub/tls/certs/system1.crt  &gt;# wget http://classroom.example.com/pub/tls/private/system1.key  &gt;# wget http://classroom.example.com/pub/example-ca.crt</code></pre></li><li><p>修改 ssl.conf 配置文件</p><pre><code>  &gt;# vim /etc/httpd/conf.d/ssl.conf  SSLCertificateFile /etc/httpd/cert/system1.crt                                       第 100 行  SSLCertificateKeyFile /etc/httpd/cert/system1.key                                    第 107 行  SSLCACertificateFile /etc/httpd/cert/example-ca.crt                                  第 122 行</code></pre></li><li><p>设置防火墙</p><pre><code>  &gt;# firewall-cmd --permanent --add-service=https  &gt;# firewall-cmd --reload</code></pre></li><li><p>重启服务</p><pre><code>  &gt;# systemctl restart httpd.service</code></pre></li></ul><p><strong>finish</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单 web 服务实现</title>
      <link href="posts/11fbe7c6/"/>
      <url>posts/11fbe7c6/</url>
      
        <content type="html"><![CDATA[<h2 id="实现-web-服务器"><a href="#实现-web-服务器" class="headerlink" title="实现 web 服务器"></a>实现 web 服务器</h2><pre><code>    为 http://system1.example.com 配置 Web 服务器:    从 http://classroom.example.com/pub/materials/station.html 下载一个主页文件，并将该文件重命名为 index.html；    将文件 index.html 拷贝到您的 web 服务器的 DocumentRoot 目录下；    不要对文件 index.html 的内容进行任何修改；    来自于 example.com 域的客户端可以访问此 Web 服务；    来自于 my133t.org 域的客户端拒绝访问此 Web 服务。</code></pre><hr><ul><li><p>安装 apache 软件包</p><pre><code>  &gt;# yum -y install httpd</code></pre></li><li><p>下载主页文件</p><pre><code>  &gt;# wget http://classroom.example.com/pub/materials/station.html -O /var/www/html/index.html</code></pre></li><li><p>修改配置文件</p><pre><code>  &gt;# vim /etc/httpd/conf.d/web.conf  &lt;Virtualhost *:80&gt;  DocumentRoot /var/www/html  ServerName system1.example.com  &lt;Directory &quot;/var/www/html&quot;&gt;  order deny,allow  deny from .my133t.org  allow from .example.com  &lt;/Directory&gt;  &lt;/Virtualhost&gt;</code></pre></li><li><p>设置防火墙</p><pre><code>  &gt;# firewall-cmd --permanent --add-service=http  &gt;# firewall-cmd --reload</code></pre></li><li><p>启动服务</p><pre><code>  &gt;# systemctl enable httpd.service  &gt;# systemctl start httpd.service</code></pre></li><li><p>测试访问</p><pre><code>  &gt;# curl http://system1.example.com</code></pre></li></ul><p><strong>finish</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口转发</title>
      <link href="posts/c0e91c93/"/>
      <url>posts/c0e91c93/</url>
      
        <content type="html"><![CDATA[<h2 id="配置端口转发"><a href="#配置端口转发" class="headerlink" title="配置端口转发"></a>配置端口转发</h2><pre><code>      在系统 system1 配置端口转发，要求如下:    在 172.25.0.0/24 网络中的客户机，访问 server0 的本地端口 5423 将被转发到 80    此设置必须永久有效。</code></pre><hr><ul><li>首先要安装并启动 http 服务<ul><li>使用 yum 安装 httpd<ul><li><code>yum install -y httpd</code></li></ul></li><li>启动 httpd.service<ul><li><code>systemctl enable httpd.service</code></li><li><code>systemctl start httpd.service</code></li></ul></li><li>添加网页内容，例如：<ul><li><code>echo this is server &gt; /var/www/html/index.html</code></li></ul></li><li>添加 httpd.service 到防火墙<ul><li><code>firewall-cmd --permanent --add-service=http</code></li><li><code>firewall-cmd --reload</code></li></ul></li><li>本机查看是否能够访问到网页内容<ul><li><code>curl localhost</code></li></ul></li></ul></li></ul><ul><li><p>使用 firewall-cmd 的富规则实现端口转发</p><blockquote><p>firewall-cmd –permanent –add-rich-rule ‘rule family=ipv4 source address=172.25.0.0/24 forward-port port=5423 to-port=80 protocol=tcp’</p></blockquote><blockquote><p>firewall-cmd –reload</p></blockquote></li><li><p>查看是否生效</p><ul><li><code>curl 172.25.0.11:5423</code></li></ul></li><li><p>更多详细内容通过 man 手册查看</p><ul><li><code>man firewalld.richlanguage</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iscsi 后端存储配置</title>
      <link href="posts/e9980a5f/"/>
      <url>posts/e9980a5f/</url>
      
        <content type="html"><![CDATA[<h2 id="配置-iscsi"><a href="#配置-iscsi" class="headerlink" title="配置 iscsi"></a>配置 iscsi</h2><pre><code>    配置 system1 提供 iSCSI服务，磁盘名为 iqn.2019-12.com.example:system1，并符合下列要求:    服务端口为 3260；    使用 iscsi_store 作其后端卷，其大小为 3GiB 访问；    此服务只能被 system2.example.com 访问。    配置system2使其能连接 system1上提供的 iqn.2019-12.com.example:system1，并符合以下要求:    iscsi 设备在系统启动的期间自动加载；    块设备 iSCSI 上包含一个大小为 2100MiB 的分区，并格式化为 ext4 文件系统,此分区挂载在/mnt/data 上，同时在系统启动的期间自动挂载。</code></pre><hr><h3 id="服务端（system1）"><a href="#服务端（system1）" class="headerlink" title="服务端（system1）"></a>服务端（system1）</h3><ul><li><p>安装软件包</p><pre><code>  &gt;# yum -y install targetcli</code></pre></li><li><p>准备磁盘空间</p><pre><code>  &gt;# fdisk /dev/vda  n  p  1  2048  +3100M  w</code></pre></li><li><p>更新分区信息</p><pre><code>  &gt;# partprobe /dev/vda</code></pre></li><li><p>新建物理卷、卷组（可选，不影响）</p><pre><code>  &gt;# pvcreate /dev/vda1  &gt;# vgcreate myvg /dev/vda1  &gt;# lvcreate -L 3G -n iscsi_store myvg  &gt;# lvdisplay</code></pre></li><li><p>配置 iscsi</p><pre><code>  &gt;# targetcli  /&gt; ls  o- / ..................................................................................... [...]            根    o- backstores .......................................................................... [...]            后端存储    | o- block .............................................................. [Storage Objects: 0]            后端存储-块    | o- fileio ............................................................. [Storage Objects: 0]            后端存储-文件    | o- pscsi .............................................................. [Storage Objects: 0]    | o- ramdisk ............................................................ [Storage Objects: 0]    o- iscsi ........................................................................ [Targets: 0]            对外提供服务    o- loopback ..................................................................... [Targets: 0]  以上是一个未经配置的空的环境，以下为配置过程（可使用绝对路径或相对路径）  /&gt; /backstores/block create iscsi_store /dev/myvg/iscsi_store   用卷组中的逻辑卷iscsi_store来创建要求的iscsi_store后端卷  /&gt; /backstores/block create iscsi_store /dev/vda1               不使用逻辑卷创建后端存储卷iscsi_store(和上一步功能相同，只要选一个做)  /&gt; ls  o- / .................................................................................... [...]    o- backstores ......................................................................... [...]    | o- block ............................................................. [Storage Objects: 1]    | | o- iscsi_store .............................. [/dev/vda1 (3.0GiB) write-thru deactivated]    | o- fileio ............................................................ [Storage Objects: 0]    | o- pscsi ............................................................. [Storage Objects: 0]    | o- ramdisk ........................................................... [Storage Objects: 0]    o- iscsi ....................................................................... [Targets: 0]    o- loopback .................................................................... [Targets: 0]  ls 看到多了后端存储iscsi_store且是块设备  /&gt; /iscsi create iqn.2019-12.com.example:system1                创建要求的对外提供服务的iqn.2019-12.com.example:system1 iscsi设备  /&gt; ls  o- / ................................................................................... [...]    o- backstores ........................................................................ [...]    | o- block ............................................................ [Storage Objects: 1]    | | o- iscsi_store ............................. [/dev/vda1 (3.0GiB) write-thru deactivated]    | o- fileio ........................................................... [Storage Objects: 0]    | o- pscsi ............................................................ [Storage Objects: 0]    | o- ramdisk .......................................................... [Storage Objects: 0]    o- iscsi ...................................................................... [Targets: 1]    | o- iqn.2019-12.com.example:system1 ............................................. [TPGs: 1]    |   o- tpg1 ......................................................... [no-gen-acls, no-auth]    |     o- acls .................................................................... [ACLs: 0]              此设备允许的访问控制记录    |     o- luns .................................................................... [LUNs: 0]              关联的后端存储设备    |     o- portals .............................................................. [Portals: 0]              网络访问地址（本机ip地址）    o- loopback ................................................................... [Targets: 0]  ls 看到iscsi下多出了新建的提供服务的iscsi设备，且名下tpg1下有acl、luns、portals记录  /&gt; /iscsi/iqn.2019-12.com.example:system1/tpg1/luns create /backstores/block/iscsi_store   关联提供服务的iscsi设备到后端存储块iscsi_store  /&gt; /iscsi/iqn.2019-12.com.example:system1/tpg1/portals create 172.25.0.11    添加网络地址（本机ip）  执行下一步之前先到system2下执行 cat /etc/iscsi/initiatorname.iscsi 获取 iqn  然后回到system1继续以下步骤  /&gt; /iscsi/iqn.2019-12.com.example:system1/tpg1/acls create iqn.1994-05.com.redhat:9e96ff23da37              添加可访问客户端  最终结果  /&gt; ls  o- / ................................................................................... [...]    o- backstores ........................................................................ [...]    | o- block ............................................................ [Storage Objects: 1]    | | o- iscsi_store ............................... [/dev/vda1 (3.0GiB) write-thru activated]    | o- fileio ........................................................... [Storage Objects: 0]    | o- pscsi ............................................................ [Storage Objects: 0]    | o- ramdisk .......................................................... [Storage Objects: 0]    o- iscsi ...................................................................... [Targets: 1]    | o- iqn.2019-12.com.example:system1 ............................................. [TPGs: 1]    |   o- tpg1 ......................................................... [no-gen-acls, no-auth]    |     o- acls .................................................................... [ACLs: 1]    |     | o- iqn.1994-05.com.redhat:9e96ff23da37 ............................ [Mapped LUNs: 1]    |     |   o- mapped_lun0 ..................................... [lun0 block/iscsi_store (rw)]    |     o- luns .................................................................... [LUNs: 1]    |     | o- lun0 ............................................ [block/iscsi_store (/dev/vda1)]    |     o- portals .............................................................. [Portals: 1]    |       o- 172.25.0.11:3260 ........................................................... [OK]    o- loopback ................................................................... [Targets: 0]  /&gt; saveconfig  /&gt; exit</code></pre></li><li><p>设置防火墙</p><pre><code>  &gt;# firewall-cmd --permanent --add-port=3260/tcp  &gt;# firewall-cmd --reload</code></pre></li><li><p>重启服务</p><pre><code>  &gt;# systemctl restart target  &gt;# systemctl enable target</code></pre></li></ul><h3 id="客户端（system2）"><a href="#客户端（system2）" class="headerlink" title="客户端（system2）"></a>客户端（system2）</h3><ul><li><p>安装客户端软件</p><pre><code>  &gt;# yum -y install iscsi-initiator-utils</code></pre></li><li><p>启动守护进程</p><pre><code>  &gt;# systemctl restart iscsid  &gt;# systemctl enable iscsid  &gt;# systemctl restart iscsi                            和上面是不一样的  &gt;# systemctl enable iscsi</code></pre></li><li><p>查看配置文档</p><pre><code>  &gt;# man iscsiadm                                                ---&gt;搜索/EXAMPLES</code></pre></li><li><p>搜素服务端iscsi</p><pre><code>  &gt;# iscsiadm -m discovery -t st -p system1.example.com  172.25.0.11:3260,1 iqn.2019-12.com.example:system1                  网络发现的iscsi设备</code></pre></li><li><p>连接服务端</p><pre><code>  &gt;# iscsiadm --mode node --targetname iqn.2019-12.com.example:system1 --portal 172.25.0.11:3260 --login</code></pre></li><li><p>查看磁盘设备</p><pre><code>  &gt;# lsblk  NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT  sda      8:32    0   3G  0 disk  vda      8:0   0   10G  0 disk  └─vda1   8:1   0    10G  0 part /  上面的sda就是iscsi设备</code></pre></li><li><p>分区</p><pre><code>  &gt;# fdisk /dev/sda  n  p  1  8192  +2100M  w  &gt;# mkfs.ext4 /dev/sda1</code></pre></li><li><p>挂载</p><pre><code>  &gt;# mkdir /mnt/data  &gt;# blkid /dev/sda1  /dev/sda1: UUID=&quot;5d9ff12a-89b7-406b-b7ed-6b8b18b483ba&quot; TYPE=&quot;ext4&quot;  &gt;# vim /etc/fstab                            在末尾添加一行挂载记录  UUID=&quot;5d9ff12a-89b7-406b-b7ed-6b8b18b483ba&quot; /mnt/data ext4 defaults,_netdev 0 0  &gt;# mount -a                                  挂载测试</code></pre></li></ul><p><strong>finish</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web 服务器访问控制</title>
      <link href="posts/dfdbd473/"/>
      <url>posts/dfdbd473/</url>
      
        <content type="html"><![CDATA[<h2 id="配置-web-内容访问"><a href="#配置-web-内容访问" class="headerlink" title="配置 web 内容访问"></a>配置 web 内容访问</h2><pre><code>    在您的system1上的 web 服务器的 DocumentRoot 目录下创建一个名为private 的目录，要求如下:    从 http://classroom.example.com/pub/materails/private.html 下载一个文件副本到这个目录，并且命名为 index.html；    不要对这个文件的内容做任何修改；    从 system1 上，任何人都可以浏览 private 的内容，但是从其他系统不能访问这个目录的内容</code></pre><hr><ul><li><p>新建文件夹</p><pre><code>  &gt;# mkdir /var/www/html/private &amp;&amp; cd /var/www/html/private</code></pre></li><li><p>下载站点文件</p><pre><code>  &gt;# wget -O index.html http://classroom.example.com/pub/materails/private.html</code></pre></li><li><p>修改配置文件</p><pre><code>  &gt;# vim /etc/httpd/conf.d/web.conf                                      末尾加入以下内容  &lt;Directory &quot;/var/www/html/private&quot;&gt;  order deny,allow  deny from all  allow from 127.0.0.1  allow from 172.25.0.11                                                 #下面几行都是一样的效果，填一个就行  allow from system1.example.com  Require local  &lt;/Directory&gt;</code></pre></li><li><p>重启 apache</p><pre><code>  &gt;# systemctl restart httpd</code></pre></li><li><p>测试</p><pre><code>  &gt;# curl http://system1.example.com/private/                                        注意最后一个 / 要打上</code></pre></li></ul><p><strong>finish</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链路聚合</title>
      <link href="posts/b7a1e4d/"/>
      <url>posts/b7a1e4d/</url>
      
        <content type="html"><![CDATA[<h2 id="链路聚合"><a href="#链路聚合" class="headerlink" title="链路聚合"></a>链路聚合</h2><pre><code>    在system1.example.com 和 system2.example.com 之间配置一个链路 team0: 此链路使用接口 eth1和eth2：    此链路在一个接口失效时仍然能工作;    此链路在system1使用下面的地址172.24.4.30/255.255.255.0；    此链路在system2使用下面的地址172.24.4.40/255.255.255.0；    此链路在系统重启之后依然保持正常状态。</code></pre><hr><h3 id="system1-配置"><a href="#system1-配置" class="headerlink" title="system1 配置"></a>system1 配置</h3><pre><code>    &gt;# nmcli connection add type team con-name team0 ifname team0 connection.autoconnect yes config &#39;&#123;&quot;runner&quot;:&#123;&quot;name&quot;:&quot;activebackup&quot;&#125;&#125;&#39;    &gt;# nmcli connection add type team-slave con-name eth1 ifname eth1 connection.autoconnect yes master team0    &gt;# nmcli connection add type team-slave con-name eth2 ifname eth2 connection.autoconnect yes master team0    &gt;# nmcli connection modify team0 ipv4.method manual ipv4.address &quot;172.24.4.30/24&quot; connection.autoconnect yes    &gt;# nmcli connection up team0    &gt;# teamdctl team0 state    &gt;# systemctl restart network</code></pre><h3 id="system2配置"><a href="#system2配置" class="headerlink" title="system2配置"></a>system2配置</h3><pre><code>    &gt;# nmcli connection add type team con-name team0 ifname team0 connection.autoconnect yes config &#39;&#123;&quot;runner&quot;:&#123;&quot;name&quot;:&quot;activebackup&quot;&#125;&#125;&#39;    &gt;# nmcli connection add type team-slave con-name eth1 ifname eth1 connection.autoconnect yes master team0    &gt;# nmcli connection add type team-slave con-name eth2 ifname eth2 connection.autoconnect yes master team0    &gt;# nmcli connection modify team0 ipv4.method manual ipv4.address &quot;172.24.4.40/24&quot; connection.autoconnect yes    &gt;# nmcli connection up team0    &gt;# teamdctl team0 state    &gt;# systemctl restart network</code></pre><p><strong>finish</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web 虚拟主机</title>
      <link href="posts/39d9deb3/"/>
      <url>posts/39d9deb3/</url>
      
        <content type="html"><![CDATA[<h2 id="扩展-web-服务器-–-配置虚拟主机"><a href="#扩展-web-服务器-–-配置虚拟主机" class="headerlink" title="扩展 web 服务器 – 配置虚拟主机"></a>扩展 web 服务器 – 配置虚拟主机</h2><pre><code>    在system1上扩展您的 web 服务器，为站点 http://www0.example.com创建一个虚拟主机，然后执行下述步骤:    设置 DocumentRoot 为/var/www/virtual；    从 http://classroom.example.com/pub/materials/www.html 下载文件并重命名为index.html；    不要对文件 index.html 的内容做任何修改；    将文件 index.html 放到虚拟主机的 DocumentRoot 目录下；    确保 student 用户能够在/var/www/virtual 目录下创建文件；    注意：原始站点 http://system1.example.com 必须仍然能够访问，名称服务器 example.com 提供对主机名 www0.example.com 的域名解析</code></pre><hr><ul><li><p>新建文件夹</p><pre><code>  &gt;# mkdir /var/www/virtual</code></pre></li><li><p>下载站点文件</p><pre><code>  &gt;# wget -O /var/www/virtual/index.html http://classroom.example.com/pub/materials/www.html</code></pre></li><li><p>修改文件夹权限</p><pre><code>  &gt;# setfacl -m u:student:rwx /var/www/virtual/</code></pre></li><li><p>配置虚拟主机</p><pre><code>  &gt;# vim /etc/httpd/conf.d/web.conf                               末尾加入以下内容  &lt;VirtualHost *:80&gt;  DocumentRoot /var/www/virtual  ServerName www0.example.com  &lt;/VirtualHost&gt;</code></pre></li><li><p>重启 apache 服务</p><pre><code>  &gt;# systemctl restart httpd</code></pre></li><li><p>测试</p><pre><code>  &gt;# curl www0.example.com                                                        这里需要在 classroom 机器上测试</code></pre></li></ul><p><strong>finish</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RHCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsftp + apache 搭建低配图片服务器</title>
      <link href="posts/b5828723/"/>
      <url>posts/b5828723/</url>
      
        <content type="html"><![CDATA[<p>因为七牛云图床到期，所以博客和其他网页上的图片资源都无法加载出来。后来考虑到这些图片大多是用于博客中且图片体积也不大，因此考虑在自己的腾讯服务器上搭建一个图片服务器。5M的网络大多也能在三秒以内加载出来。以下是简单的记录。</p><hr><h2 id="一、-安装-vsftp"><a href="#一、-安装-vsftp" class="headerlink" title="一、 安装 vsftp"></a>一、 安装 vsftp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vsftpd</span><br><span class="line"></span><br><span class="line">systemctl enable vsftpd</span><br><span class="line"></span><br><span class="line">systemctl restart vsftpd</span><br></pre></td></tr></table></figure><hr><h2 id="二、-配置-vsftp"><a href="#二、-配置-vsftp" class="headerlink" title="二、 配置 vsftp"></a>二、 配置 vsftp</h2><blockquote><p>我的 ftp 服务采用的是主动方式，且禁用了匿名用户登录</p></blockquote><blockquote><p>以下是需要修改的 vsftp 配置文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</span><br><span class="line"></span><br><span class="line">anonymous_enable&#x3D;NO</span><br><span class="line">listen&#x3D;YES</span><br><span class="line">#listen_ipv6&#x3D;YES</span><br><span class="line">userlist_enable&#x3D;YES</span><br><span class="line">userlist_deny&#x3D;NO</span><br></pre></td></tr></table></figure><blockquote><p>添加允许登录的用户，将文件中默认存在的用户全部注释掉，再在最后加上 ftp 用户</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># vsftpd userlist</span><br><span class="line"># If userlist_deny&#x3D;NO, only allow users in this file</span><br><span class="line"># If userlist_deny&#x3D;YES (default), never allow users in this file, and</span><br><span class="line"># do not even prompt for a password.</span><br><span class="line"># Note that the default vsftpd pam config also checks &#x2F;etc&#x2F;vsftpd&#x2F;ftpusers</span><br><span class="line"># for users that are denied.</span><br><span class="line">#root</span><br><span class="line">#bin</span><br><span class="line">#daemon</span><br><span class="line">#adm</span><br><span class="line">#lp</span><br><span class="line">#sync</span><br><span class="line">#shutdown</span><br><span class="line">#halt</span><br><span class="line">#mail</span><br><span class="line">#news</span><br><span class="line">#uucp</span><br><span class="line">#operator</span><br><span class="line">#games</span><br><span class="line">#nobody</span><br><span class="line">ftpuser2</span><br></pre></td></tr></table></figure><blockquote><p>添加用户 ftpuser2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useradd ftpuser2 </span><br><span class="line"></span><br><span class="line">echo &quot;password&quot;|passwd ftpuser2 --stdin</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="三、配置-apache"><a href="#三、配置-apache" class="headerlink" title="三、配置 apache"></a>三、配置 apache</h2><blockquote><p>安装 apache</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-yinstallhttpd</span><br><span class="line">systemctl enable httpd</span><br><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><blockquote><p>添加一个配置文件 pic.conf ,这里我的 80 端口已经在使用了，所以另分配一个 8070 端口</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;pic.conf &lt;&lt;EOF</span><br><span class="line">Listen 8070</span><br><span class="line">&lt;VirtualHost *:8070&gt;</span><br><span class="line">ServerName ***.**.***.**:8070</span><br><span class="line">DocumentRoot &#x2F;home&#x2F;ftpuser2&#x2F;</span><br><span class="line">&lt;directory &#x2F;home&#x2F;ftpuser2&gt;</span><br><span class="line">Require all granted</span><br><span class="line">AllowOverride All</span><br><span class="line">&lt;&#x2F;directory&gt;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><blockquote><p>重启 apache 服务</p></blockquote><blockquote><p>systemctl restart httpd</p></blockquote><p>ok</p><hr><h2 id="四、-测试"><a href="#四、-测试" class="headerlink" title="四、 测试"></a>四、 测试</h2><p><img src= "/img/loading.gif" data-lazy-src="http://122.51.165.18:8070/test.png" alt="test"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="爱-月"><a href="#爱-月" class="headerlink" title="爱 月"></a><center>爱 月<center/></h1><h3 id="I-love-three-things"><a href="#I-love-three-things" class="headerlink" title="I love three things"></a><center>I love three things<center/></h3><h3 id="in-this-world"><a href="#in-this-world" class="headerlink" title="in this world"></a><center>in this world<center/></h3><h3 id="the-sun"><a href="#the-sun" class="headerlink" title="the sun"></a><center>the sun<center/></h3><h3 id="the-moon"><a href="#the-moon" class="headerlink" title="the moon"></a><center>the moon<center/></h3><h3 id="and"><a href="#and" class="headerlink" title="and"></a><center>and<center/></h3><h3 id="you"><a href="#you" class="headerlink" title="you"></a><center>you<center/></h3><h3 id="The-sun-for-the-day"><a href="#The-sun-for-the-day" class="headerlink" title="The sun for the day"></a><center>The sun for the day<center/></h3><h3 id="the-moon-for-the-night"><a href="#the-moon-for-the-night" class="headerlink" title="the moon for the night"></a><center>the moon for the night<center/></h3><h3 id="and-you-forever"><a href="#and-you-forever" class="headerlink" title="and you forever"></a><center>and you forever<center/></h3><img src= "/img/loading.gif" data-lazy-src="/img/yue.jpg" style="zoom:50%" /><h3 id="浮世三千，吾爱有三"><a href="#浮世三千，吾爱有三" class="headerlink" title="浮世三千，吾爱有三"></a><center>浮世三千，吾爱有三<center/></h3><h3 id="日，月与卿"><a href="#日，月与卿" class="headerlink" title="日，月与卿"></a><center>日，月与卿<center/></h3><h3 id="日为朝，月为暮"><a href="#日为朝，月为暮" class="headerlink" title="日为朝，月为暮"></a><center>日为朝，月为暮<center/></h3><h3 id="卿为朝朝暮暮"><a href="#卿为朝朝暮暮" class="headerlink" title="卿为朝朝暮暮"></a><center>卿为朝朝暮暮<center/></h3>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>物以类聚，人以群分！</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="link/index.html"/>
      <url>link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>每一个事件都有与众不同的特性</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
